[{"path":"https://adamlilith.github.io/omnibus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam B. Smith. Maintainer, author.","code":""},{"path":"https://adamlilith.github.io/omnibus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith (2024). omnibus: Helper Tools Managing Data, Dates, Missing Values, Text. R package version 1.2.14, https://adamlilith.github.io/omnibus/, https://github.com/adamlilith/omnibus.","code":"@Manual{,   title = {omnibus: Helper Tools for Managing Data, Dates, Missing Values, and Text},   author = {Adam B. Smith},   year = {2024},   note = {R package version 1.2.14, https://adamlilith.github.io/omnibus/},   url = {https://github.com/adamlilith/omnibus}, }"},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"omnibus","dir":"","previous_headings":"","what":"Helper Tools for Managing Data, Dates, Missing Values, and Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"R Utility Functions 99%  assortment helper functions managing data (e.g., rotating values matrices user-defined angle, switching row- column-indexing), dates (e.g., intuiting year messy date strings), handling missing values (e.g., removing elements/rows across multiple vectors matrices NA), text (e.g., flushing reports console real-time); combining data frames different schema (copying, filling, concatenating columns applying functions combining).","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"version 1.1.2, omnibus CRAN! can install latest CRAN-stable version normal way install packages CRAN, development version using: remotes::install_github('adamlilith/omnibus', dependencies = TRUE) may need install remotes package first.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data manipulation","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"appendLists(): Merge lists, appending elements name. bracket(): Find values bracket given number. combineDf(): Combine data frames different schema. compareFloat(): Compare two values within floating-point precision. convertUnits(): Convert length areal units. conversionFactors(): Data frame conversion factors length areal units. corner(): Corner matrix data frame. cull(): Force vectors matrices/data frames length number rows. expandUnits(): Convert unit abbreviations proper unit names. insert(): Insert values vector. insertCol insertRow(): Insert column(s)/row(s) matrix data frame. maxRuns(): Maximum number continuous “runs” values meeting particular condition. mergeLists(): Merge lists, precedence elements one list another names. mirror(): Flip object left-right (-). mmode(): Modal value(s). notIn() %notin%: Opposite %%. renameCol(): Rename column. renumSeq(): Renumber sequence. rotateMatrix(): Rotate matrix. roundTo(): Rounds value nearest target value. rowColIndexing(): Convert row column indexing matrix. side(): Left/right side data frame matrix. stretchMinMax(): Rescale values given range. unlistRecursive(): object list also list, unlist . unragMatrix(): Turn “ragged” matrix “ragged” vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"domLeap(): Data frame days month leap year. domNonLeap(): Data frame days month non-leap year. doyLeap(): Data frame days year leap year. doyNonLeap(): Data frame days year non-leap year. isLeapYear(): year leap year? yearFromDate(): Attempt find year across dates non-standard formats.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"geometry","dir":"","previous_headings":"","what":"Geometry","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"pairDist(): Pairwise Euclidean distance two sets points. quadArea(): Area quadrilateral.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"handling-nas","dir":"","previous_headings":"","what":"Handling NAs","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"%<na%, %<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA(): Logical operators robust NA. naCompare(): Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti(): Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows(): Indices rows least one NA.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"data-properties","dir":"","previous_headings":"","what":"Data properties","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"countDecDigits(): Count number digits decimal. .wholeNumber(): numeric value whole number, within floating-point precision? longRun(): Longest run given sequence vector. roundedSigDigits(): Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin(): Combine .max pmax .min pmin (vectorized .max .min).","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"system","dir":"","previous_headings":"","what":"System","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"dirCreate(): Nicer version dir.create(). eps(): Smallest floating point value computer can think . listFiles(): Nicer version list.files(). memUse(): Display largest objects memory.","code":""},{"path":"https://adamlilith.github.io/omnibus/index.html","id":"text","dir":"","previous_headings":"","what":"Text","title":"Helper Tools for Managing Data, Dates, Missing Values, and Text","text":"capIt(): Capitalize first letter string. forwardSlash(): Convert backslashes forward slashes. pmatchSafe(): Partial matching strings error checking. prefix(): Add repeating character string ensure user-defined length (e.g., 7 –> 007). rstring(): Make nearly-guaranteed unique string. say(): Replacement print('abc'); flush.console(). Adam","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Append values to elements of a list from another list — appendLists","title":"Append values to elements of a list from another list — appendLists","text":"function \"adds\" two lists different names together. example, one list l1 <- list(=1, b=\"XYZ\") second l2 <- list(=3, c=FALSE), output list(= c(1, 3), b = \"XYZ\", c = FALSE). elements list must names.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append values to elements of a list from another list — appendLists","text":"","code":"appendLists(...)"},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append values to elements of a list from another list — appendLists","text":"... Two lists. elements must names.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append values to elements of a list from another list — appendLists","text":"list.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append values to elements of a list from another list — appendLists","text":"two lists share name elements class, merged -. classes different, one coerced (see *Examples*). output elements names lists.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/appendLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append values to elements of a list from another list — appendLists","text":"","code":"# same data types for same named element l1 <- list(a=1, b=\"XYZ\") l2 <- list(a=3, c=FALSE) appendLists(l1, l2) #> $a #> [1] 1 3 #>  #> $b #> [1] \"XYZ\" #>  #> $c #> [1] FALSE #>   # different data types for same named element l1 <- list(a=3, b=\"XYZ\") l2 <- list(a=\"letters\", c=FALSE) appendLists(l1, l2) #> $a #> [1] \"3\"       \"letters\" #>  #> $b #> [1] \"XYZ\" #>  #> $c #> [1] FALSE #>"},{"path":"https://adamlilith.github.io/omnibus/reference/bracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify values bracketing another value — bracket","title":"Identify values bracketing another value — bracket","text":"function takes ordered vector numeric character values finds pair bracket third value, x. x exactly equal one values vector, single value equal x returned. x falls outside range vector, least/extreme value vector returned (depending side distribution vector x resides). Optionally, users can function return index values bracket x.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/bracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify values bracketing another value — bracket","text":"","code":"bracket(x, by, index = FALSE, inner = TRUE, warn = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/bracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify values bracketing another value — bracket","text":"x numeric character vector. numeric character vector. sorted (high low low high... , error result). index Logical. FALSE (default), numeric values returned. TRUE, index indices bracketing value(s) returned. inner Logical. TRUE (default), x surrounded least one series repeating values, return values (indices) among repeated sequence(s) closest value x. FALSE, return value(s) (indices) among repeated sequence(s) farthest value x. example, index = TRUE, = c(1, 2, 2, 2, 3, 3), x = 2.5, setting inner = TRUE return index third 2 first 3.  inner = FALSE, function returns index first 2 second 3. warn Logical. TRUE, warn x outside range .","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/bracket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify values bracketing another value — bracket","text":"x single value, function return numeric vector length 1 2, depending many values bracket x. values , median index (value) returned. x vector, result list one element per item x element format case x single value.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/bracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify values bracketing another value — bracket","text":"","code":"by <- 2 * (1:5) bracket(4.2, by) #> [1] 4 6 bracket(6.8, by) #> [1] 6 8  bracket(3.2, by, index=TRUE) #> [1] 1 2 bracket(c(3.2, 9.8, 4), by) #> [[1]] #> [1] 2 4 #>  #> [[2]] #> [1]  8 10 #>  #> [[3]] #> [1] 4 #>   bracket(2, c(0, 1, 1, 1, 3, 5), index=TRUE) #> [1] 4 5 bracket(3, c(1, 2, 10)) #> [1]  2 10  bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.5, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE) #> [1] 4 5 bracket(2.9, c(1, 2, 2, 2, 3, 3), index=TRUE, inner=FALSE) #> [1] 2 6  # \\donttest{ by <- 1:10 bracket(-100, by) #> [1] 1 bracket(100, by) #> [1] 10 # }"},{"path":"https://adamlilith.github.io/omnibus/reference/capIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter of a string — capIt","title":"Capitalize first letter of a string — capIt","text":"Capitalize first letter string first letters list strings.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/capIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter of a string — capIt","text":"","code":"capIt(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/capIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter of a string — capIt","text":"x Character character vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/capIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter of a string — capIt","text":"Character character vector.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/capIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter of a string — capIt","text":"","code":"x <- c('shots', 'were', 'exchanged at the ', 'hospital.') capIt(x) #>              shots               were  exchanged at the           hospital.  #>            \"Shots\"             \"Were\" \"Exchanged At The\"        \"Hospital.\""},{"path":"https://adamlilith.github.io/omnibus/reference/combineDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with different fields using a crosswalk table — combineDf","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"function combines multiple \"source\" data frames, possibly different column names, single \"destination\" data frame.  Usually merge faster easier implement columns merged names, rbind always faster much easier column names data types match exactly. key tool function \"crosswalk\" table (data.frame) tells function fields source data frame match final fields destination data frame. Values source data frame fields can used -, combined across fields, functions applied put destination data frame. source data frame doe snot gave field matches destination field, default value (including NA) can assigned cells source data frame. data frames combined can provided ... file names first column crosswalk table. can either CSV files (extension \".csv\"), TAB files (extension \".tab\"), \"Rdata\" files (read using load \".rda\" \".rdata\" extension), \"RDS\" files (read using readRDS \".rds\" extension). file type intuited extension, case matter. Note object Rdata file name object function (.e., arguments plus objects internal function), may cause conflict. help obviate issue, internal objects named period end (e.g., \"crossCell.\" \"countDf.\"). cells source data frame leading trailing white spaces removed combining.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/combineDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"combineDf(   ...,   crosswalk,   collapse = \"; \",   useColumns = NULL,   excludeColumns = NULL,   useFrames = NULL,   classes = NULL,   verbose = FALSE )"},{"path":"https://adamlilith.github.io/omnibus/reference/combineDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"... Data frames combine. must listed order appear crosswalk table. crosswalk data.frame. Column names fields destination data frame. row corresponds different data frame join. ... used first column must paths file names CSV, TAB, Rdata, RDS files representing data frames join. objects coerced data.frames. column, elements cell contain name column source data frame coincides column name crosswalk table.  example, suppose destination data frame column name \"species\" names species within . first source data frame column named \"Species\" second source data frame column named \"scientificName\", first value crosswalk \"species\" column \"Species\" second \"scientificName\". take values \"Species\" field first source data frame values \"scientificName\" field second source data frame put \"species\" field destination frame. complex operations can done using following cells crosswalk: Filling cells single value: value crosswalk cell begins \"%fill%\", value follows repeated destination data frame row. example, %fill% inspected repeat string \"inspected\" every row output corresponding respective source data frame (spaces immediately %fill% ignored). Concatenating (pasting) columns together: combine multiple fields, begin crosswalk cell \"%cat%\", list fields combine (without commas separating ). example, crosswalk cell %cat% field1 field2 field3 resulting column destination data frame values field1, field2, field3 pasted together. See also argument collapse. Applying function: can manipulate values including functions crosswalk cell. crosswalk cell begin \"%fun%\", followed expression evaluate. Expressions generally use \"<-\" operator (equals operator used way).  example: %fun% ifelse(.numeric(field1) >20, NA, .numeric(field1)) create column NA whenever values field1 >20, value field1 otherwise. Note mathematical operations, almost always necessary use .numeric around column names representing numbers since fields read characters. collapse Character, specifies string put fields combined %cat% operator crosswalk table. useColumns, excludeColumns Logical, character vector, integer vector, NULL. Indicates columns crosswalk table used used. can given TRUE/FALSE vector, vector column names, vector column index values (integers). can specify useColumns excludeColumns time (one must NULL).  NULL (default), columns crosswalk used. useFrames Logical, character, NULL.  Indicates particular source data frame used.  TRUE/FALSE vector name column crosswalk table TRUE/FALSE values. name column, column removed columns useColumns. NULL (default). data frames crosswalk used. classes Character character list, specifies classes (e.g., character, logical, numeric, integer) assigned column output table. NULL, classes assumed character.  just one value listed, columns set class. list, must length number columns crosswalk specify class column. names, names must correspond columns crosswalk used assign data type corresponding columns. verbose Logical, TRUE prints extra information execution.  Useful debugging crosswalk table.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/combineDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"data frame.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/combineDf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with different fields using a crosswalk table — combineDf","text":"","code":"df1 <- data.frame(x1=1:5, x2=FALSE, x3=letters[1:5], x4=LETTERS[1:5],        x5='stuff', x6=11:15) df2 <- data.frame(y1=11:15, y2=rev(letters)[1:5], y3=runif(5))  crosswalk <- data.frame(   a = c('x1', 'y1'),   b = c('x2', '%fill% TRUE'),   c = c('%cat% x3 x4', 'y2'),   d = c('x5', '%fill% NA'),  e = c('%fun% as.numeric(x6) > 12', '%fun% round(as.numeric(y3), 2)') )  combined <- combineDf(df1, df2, crosswalk=crosswalk) combined #>     a     b    c     d    e #> 1   1 FALSE a; A stuff    0 #> 2   2 FALSE b; B stuff    0 #> 3   3 FALSE c; C stuff    1 #> 4   4 FALSE d; D stuff    1 #> 5   5 FALSE e; E stuff    1 #> 6  11  TRUE    z    NA 0.08 #> 7  12  TRUE    y    NA 0.83 #> 8  13  TRUE    x    NA  0.6 #> 9  14  TRUE    w    NA 0.16 #> 10 15  TRUE    v    NA 0.01"},{"path":"https://adamlilith.github.io/omnibus/reference/compareFloat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values to floating-point precision — compareFloat","title":"Compare values to floating-point precision — compareFloat","text":"functions compare values accounting differences floating point precision.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/compareFloat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values to floating-point precision — compareFloat","text":"","code":"compareFloat(x, y, op, tol = .Machine$double.eps^0.5)  x %<% y  x %<=% y  x %==% y  x %>=% y  x %>% y  x %!=% y"},{"path":"https://adamlilith.github.io/omnibus/reference/compareFloat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values to floating-point precision — compareFloat","text":"x, y Numeric op Operator comparison (must quotes): \"<\", \">\", \"<=\", \">=\", \"==\", \"!=\" tol Tolerance value: largest absolute difference x y considered equality. default .Machine$double.eps^0.5.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/compareFloat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values to floating-point precision — compareFloat","text":"TRUE, FALSE, NA","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/compareFloat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values to floating-point precision — compareFloat","text":"","code":"x <- 0.9 - 0.8 y <- 0.8 - 0.7  x < y #> [1] TRUE x %<% y #> [1] FALSE compareFloat(x, y, \"<\") #> [1] FALSE  x <= y #> [1] TRUE x %<=% y #> [1] TRUE compareFloat(x, y, \"<=\") #> [1] TRUE  x == y #> [1] FALSE x %==% y #> [1] TRUE compareFloat(x, y, \"==\") #> [1] TRUE  y > x #> [1] TRUE y %>% x #> [1] FALSE compareFloat(y, x, \">\") #> [1] FALSE  y >= x #> [1] TRUE y %>=% x #> [1] TRUE compareFloat(y, x, \">=\") #> [1] TRUE  x != y #> [1] TRUE x %!=% y #> [1] FALSE compareFloat(x, y, \"!=\") #> [1] FALSE"},{"path":"https://adamlilith.github.io/omnibus/reference/conversionFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame or conversion factors for length or areal units — conversionFactors","title":"Data frame or conversion factors for length or areal units — conversionFactors","text":"Data frame conversion factors length areal units.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/conversionFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame or conversion factors for length or areal units — conversionFactors","text":"","code":"conversionFactors"},{"path":"https://adamlilith.github.io/omnibus/reference/conversionFactors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame or conversion factors for length or areal units — conversionFactors","text":"object class 'data.frame'.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/conversionFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame or conversion factors for length or areal units — conversionFactors","text":"","code":"data(conversionFactors) conversionFactors #>                from              to       factor #> 1             acres           acres 1.000000e+00 #> 2             acres           feet2 4.356000e+04 #> 3             acres        hectares 4.046860e-01 #> 4             acres     kilometers2 4.046860e-03 #> 5             acres         meters2 4.046860e+03 #> 6             acres          miles2 1.562500e-03 #> 7             acres nautical miles2 1.179875e-03 #> 8             acres          yards2 4.840000e+03 #> 9              feet            feet 1.000000e+00 #> 10             feet      kilometers 3.048000e-04 #> 11             feet          meters 3.048000e-01 #> 12             feet           miles 1.893940e-04 #> 13             feet  nautical miles 1.645790e-04 #> 14             feet           yards 3.333333e-01 #> 15            feet2           acres 2.300000e-05 #> 16            feet2           feet2 1.000000e+00 #> 17            feet2        hectares 9.290000e-06 #> 18            feet2     kilometers2 9.290000e-08 #> 19            feet2         meters2 9.290304e-02 #> 20            feet2          miles2 3.590000e-08 #> 21            feet2 nautical miles2 2.710000e-08 #> 22            feet2          yards2 1.111111e-01 #> 23         hectares           acres 2.471050e+00 #> 24         hectares           feet2 1.076390e+05 #> 25         hectares        hectares 1.000000e+00 #> 26         hectares     kilometers2 1.000000e-02 #> 27         hectares         meters2 1.000000e+04 #> 28         hectares          miles2 3.861020e-03 #> 29         hectares nautical miles2 3.429904e+02 #> 30         hectares          yards2 1.195990e+04 #> 31       kilometers            feet 3.280840e+03 #> 32       kilometers      kilometers 1.000000e+00 #> 33       kilometers          meters 1.000000e-03 #> 34       kilometers           miles 6.213710e-01 #> 35       kilometers  nautical miles 5.399570e-01 #> 36       kilometers           yards 1.093610e+03 #> 37      kilometers2           acres 2.471050e+02 #> 38      kilometers2           feet2 1.080000e+07 #> 39      kilometers2        hectares 1.000000e+02 #> 40      kilometers2     kilometers2 1.000000e+00 #> 41      kilometers2         meters2 1.000000e+06 #> 42      kilometers2          miles2 3.861020e-01 #> 43      kilometers2 nautical miles2 2.915530e-01 #> 44      kilometers2          yards2 1.200000e+06 #> 45           meters            feet 3.280840e+00 #> 46           meters      kilometers 1.000000e-03 #> 47           meters          meters 1.000000e+00 #> 48           meters           miles 6.213710e-04 #> 49           meters  nautical miles 5.399570e-04 #> 50           meters           yards 1.093613e+00 #> 51          meters2           acres 2.471050e-04 #> 52          meters2           feet2 1.076390e+01 #> 53          meters2        hectares 1.000000e-04 #> 54          meters2     kilometers2 1.000000e-06 #> 55          meters2         meters2 1.000000e+00 #> 56          meters2          miles2 3.860000e-07 #> 57          meters2 nautical miles2 2.920000e-07 #> 58          meters2          yards2 1.195990e+00 #> 59            miles            feet 5.280000e+03 #> 60            miles      kilometers 1.609344e+00 #> 61            miles          meters 1.609340e+03 #> 62            miles           miles 1.000000e+00 #> 63            miles  nautical miles 8.689760e-01 #> 64            miles           yards 1.760000e+03 #> 65           miles2           acres 6.400000e+02 #> 66           miles2           feet2 2.790000e+07 #> 67           miles2        hectares 2.589990e+02 #> 68           miles2     kilometers2 2.589988e+00 #> 69           miles2         meters2 2.590000e+06 #> 70           miles2          miles2 1.000000e+00 #> 71           miles2 nautical miles2 1.324293e+00 #> 72           miles2          yards2 3.100000e+06 #> 73   nautical miles            feet 6.076120e+03 #> 74   nautical miles      kilometers 1.852000e+00 #> 75   nautical miles          meters 1.852000e+03 #> 76   nautical miles           miles 1.150780e+00 #> 77   nautical miles  nautical miles 1.000000e+00 #> 78   nautical miles           yards 2.025370e+03 #> 79  nautical miles2           acres 1.179875e-03 #> 80  nautical miles2           feet2 3.691918e+07 #> 81  nautical miles2        hectares 3.429904e+02 #> 82  nautical miles2     kilometers2 3.429900e+00 #> 83  nautical miles2         meters2 3.400000e+06 #> 84  nautical miles2          miles2 1.324293e+00 #> 85  nautical miles2 nautical miles2 1.000000e+00 #> 86  nautical miles2          yards2 2.440000e-07 #> 87            yards            feet 3.000000e+00 #> 88            yards      kilometers 9.144000e-04 #> 89            yards          meters 9.144000e-01 #> 90            yards           miles 5.681820e-04 #> 91            yards  nautical miles 4.937370e-04 #> 92            yards           yards 1.000000e+00 #> 93           yards2           acres 2.066120e-04 #> 94           yards2           feet2 9.000000e+00 #> 95           yards2        hectares 8.360000e-05 #> 96           yards2     kilometers2 8.360000e-07 #> 97           yards2         meters2 8.361274e-01 #> 98           yards2          miles2 3.230000e-07 #> 99           yards2 nautical miles2 2.440000e-07 #> 100          yards2          yards2 1.000000e+00"},{"path":"https://adamlilith.github.io/omnibus/reference/convertUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert length or areal units — convertUnits","title":"Convert length or areal units — convertUnits","text":"function converts length area values one unit another (e.g., meters miles, square yards acres). Alternatively, provides conversion factor changing one unit another.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/convertUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert length or areal units — convertUnits","text":"","code":"convertUnits(from = NULL, to = NULL, x = NULL)"},{"path":"https://adamlilith.github.io/omnibus/reference/convertUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert length or areal units — convertUnits","text":", Character: Names units convert /. Partial matching used, case ignored. Valid values listed . '*2' values represent areas (e.g., 'm2' \"meters-squared\"). 'm' 'meters' 'm2' 'meters2' 'km' 'kilometers' 'km2' 'kilometers2' 'mi' 'miles' 'mi2' 'miles2' 'ft' 'feet' 'ft2' 'feet2' 'yd' 'yards' 'yd2' 'yards2' 'ac' 'acres' 'ha' 'hectares' 'nmi' 'nautical miles' 'nmi2' 'nautical miles2' x Numeric NULL (default). value(s) convert unit specified . left NULL, conversion factor reported instead.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/convertUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert length or areal units — convertUnits","text":"","code":"# conversion convertUnits(from = 'm', to = 'km', 250) #> [1] 0.25 convertUnits(from = 'm', to = 'mi', 250) #> [1] 0.1553428 convertUnits(from = 'm2', to = 'km2', 250) #> [1] 0.00025  # conversion factors  convertUnits(from = 'm', to = 'km') #> [1] 0.001 convertUnits(from = 'm') #>      from             to      factor #> 45 meters           feet 3.280840000 #> 46 meters     kilometers 0.001000000 #> 47 meters         meters 1.000000000 #> 48 meters          miles 0.000621371 #> 49 meters nautical miles 0.000539957 #> 50 meters          yards 1.093613298 convertUnits(to = 'm') #>              from     to    factor #> 11           feet meters    0.3048 #> 33     kilometers meters    0.0010 #> 47         meters meters    1.0000 #> 61          miles meters 1609.3400 #> 75 nautical miles meters 1852.0000 #> 89          yards meters    0.9144"},{"path":"https://adamlilith.github.io/omnibus/reference/corner.html","id":null,"dir":"Reference","previous_headings":"","what":"Corner of a matrix or data frame — corner","title":"Corner of a matrix or data frame — corner","text":"Return corner matrix data frame (.e., upper left, upper right, lower left, lower right).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/corner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corner of a matrix or data frame — corner","text":"","code":"corner(x, corner = 1, size = 5)"},{"path":"https://adamlilith.github.io/omnibus/reference/corner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corner of a matrix or data frame — corner","text":"x Data frame matrix. corner Integer set 1, 2, 3, 4 character set 'topleft', 'topright', 'bottomleft', 'bottomright' set 'tl', 'tr', 'bl', 'br'. Indicates corner return. Integers 1, 2, 3 4 correspond top left, top right, bottom left, bottom right corners. default 1, top left corner. size Positive integer, number rows columns return. fewer columns/rows indicated columns/rows returned.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/corner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corner of a matrix or data frame — corner","text":"matrix data.frame.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/corner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corner of a matrix or data frame — corner","text":"","code":"x <- matrix(1:120, ncol=12, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1   11   21   31   41   51   61   71   81    91   101   111 #>  [2,]    2   12   22   32   42   52   62   72   82    92   102   112 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103   113 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104   114 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105   115 #>  [6,]    6   16   26   36   46   56   66   76   86    96   106   116 #>  [7,]    7   17   27   37   47   57   67   77   87    97   107   117 #>  [8,]    8   18   28   38   48   58   68   78   88    98   108   118 #>  [9,]    9   19   29   39   49   59   69   79   89    99   109   119 #> [10,]   10   20   30   40   50   60   70   80   90   100   110   120 corner(x, 1) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   11   21   31   41 #> [2,]    2   12   22   32   42 #> [3,]    3   13   23   33   43 #> [4,]    4   14   24   34   44 #> [5,]    5   15   25   35   45 corner(x, 2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   71   81   91  101  111 #> [2,]   72   82   92  102  112 #> [3,]   73   83   93  103  113 #> [4,]   74   84   94  104  114 #> [5,]   75   85   95  105  115 corner(x, 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   16   26   36   46 #> [2,]    7   17   27   37   47 #> [3,]    8   18   28   38   48 #> [4,]    9   19   29   39   49 #> [5,]   10   20   30   40   50 corner(x, 4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   76   86   96  106  116 #> [2,]   77   87   97  107  117 #> [3,]   78   88   98  108  118 #> [4,]   79   89   99  109  119 #> [5,]   80   90  100  110  120"},{"path":"https://adamlilith.github.io/omnibus/reference/countDecDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of digits after a decimal place — countDecDigits","title":"Number of digits after a decimal place — countDecDigits","text":"Count number digits decimal place. Note trailing zeros likely ignored.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/countDecDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/countDecDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of digits after a decimal place — countDecDigits","text":"x Numeric numeric vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/countDecDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of digits after a decimal place — countDecDigits","text":"Integer.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/countDecDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of digits after a decimal place — countDecDigits","text":"","code":"countDecDigits(c(1, 1.1, 1.12, 1.123, 1.1234, -1, 0, 10.0000, 10.0010)) #> [1] 0 1 2 3 4 0 0 0 3"},{"path":"https://adamlilith.github.io/omnibus/reference/cull.html","id":null,"dir":"Reference","previous_headings":"","what":"Force objects to have length or rows equal to the shortest — cull","title":"Force objects to have length or rows equal to the shortest — cull","text":"function takes set vectors, data frames, matrices removes last values/rows length/number rows equal shortest among .","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/cull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"cull(...)"},{"path":"https://adamlilith.github.io/omnibus/reference/cull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force objects to have length or rows equal to the shortest — cull","text":"... Vectors, matrices, data frames.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/cull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force objects to have length or rows equal to the shortest — cull","text":"list one element per object supplied argument function.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/cull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force objects to have length or rows equal to the shortest — cull","text":"","code":"a <- 1:10 b <- 1:20 c <- letters cull(a, b, c) #> Error in ellipseNames(...): could not find function \"ellipseNames\" x <- data.frame(x=1:10, y=letters[1:10]) y <- data.frame(x=1:26, y=letters) cull(x, y) #> Error in ellipseNames(...): could not find function \"ellipseNames\""},{"path":"https://adamlilith.github.io/omnibus/reference/dirCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for dir.create() — dirCreate","title":"Replacement for dir.create() — dirCreate","text":"function somewhat friendlier version dir.create automatically sets recursive=TRUE showWarnings=FALSE arguments.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/dirCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for dir.create() — dirCreate","text":"","code":"dirCreate(...)"},{"path":"https://adamlilith.github.io/omnibus/reference/dirCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for dir.create() — dirCreate","text":"... Character string(s). path name directory create. Multiple strings pasted together one path, although slashes pasted .","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/dirCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for dir.create() — dirCreate","text":"Nothing (creates directory storage system).","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/domLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for leap years — domLeap","title":"Day of month for leap years — domLeap","text":"Data frame day month month leap year.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/domLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for leap years — domLeap","text":"","code":"domLeap"},{"path":"https://adamlilith.github.io/omnibus/reference/domLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for leap years — domLeap","text":"object class 'data.frame'.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/domLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for leap years — domLeap","text":"","code":"data(domLeap) domLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     29     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"https://adamlilith.github.io/omnibus/reference/domNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of month for non-leap years — domNonLeap","title":"Day of month for non-leap years — domNonLeap","text":"Data frame day month month non-leap year.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/domNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of month for non-leap years — domNonLeap","text":"","code":"domNonLeap"},{"path":"https://adamlilith.github.io/omnibus/reference/domNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of month for non-leap years — domNonLeap","text":"object class 'data.frame'.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/domNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of month for non-leap years — domNonLeap","text":"","code":"data(domNonLeap) domNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1      1      1      1      1      1      1      1      1       1 #> 2       2      2      2      2      2      2      2      2      2       2 #> 3       3      3      3      3      3      3      3      3      3       3 #> 4       4      4      4      4      4      4      4      4      4       4 #> 5       5      5      5      5      5      5      5      5      5       5 #> 6       6      6      6      6      6      6      6      6      6       6 #> 7       7      7      7      7      7      7      7      7      7       7 #> 8       8      8      8      8      8      8      8      8      8       8 #> 9       9      9      9      9      9      9      9      9      9       9 #> 10     10     10     10     10     10     10     10     10     10      10 #> 11     11     11     11     11     11     11     11     11     11      11 #> 12     12     12     12     12     12     12     12     12     12      12 #> 13     13     13     13     13     13     13     13     13     13      13 #> 14     14     14     14     14     14     14     14     14     14      14 #> 15     15     15     15     15     15     15     15     15     15      15 #> 16     16     16     16     16     16     16     16     16     16      16 #> 17     17     17     17     17     17     17     17     17     17      17 #> 18     18     18     18     18     18     18     18     18     18      18 #> 19     19     19     19     19     19     19     19     19     19      19 #> 20     20     20     20     20     20     20     20     20     20      20 #> 21     21     21     21     21     21     21     21     21     21      21 #> 22     22     22     22     22     22     22     22     22     22      22 #> 23     23     23     23     23     23     23     23     23     23      23 #> 24     24     24     24     24     24     24     24     24     24      24 #> 25     25     25     25     25     25     25     25     25     25      25 #> 26     26     26     26     26     26     26     26     26     26      26 #> 27     27     27     27     27     27     27     27     27     27      27 #> 28     28     28     28     28     28     28     28     28     28      28 #> 29     29     NA     29     29     29     29     29     29     29      29 #> 30     30     NA     30     30     30     30     30     30     30      30 #> 31     31     NA     31     NA     31     NA     31     31     NA      31 #>    month11 month12 #> 1        1       1 #> 2        2       2 #> 3        3       3 #> 4        4       4 #> 5        5       5 #> 6        6       6 #> 7        7       7 #> 8        8       8 #> 9        9       9 #> 10      10      10 #> 11      11      11 #> 12      12      12 #> 13      13      13 #> 14      14      14 #> 15      15      15 #> 16      16      16 #> 17      17      17 #> 18      18      18 #> 19      19      19 #> 20      20      20 #> 21      21      21 #> 22      22      22 #> 23      23      23 #> 24      24      24 #> 25      25      25 #> 26      26      26 #> 27      27      27 #> 28      28      28 #> 29      29      29 #> 30      30      30 #> 31      NA      31"},{"path":"https://adamlilith.github.io/omnibus/reference/doyLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of year for leap years — doyLeap","title":"Day of year for leap years — doyLeap","text":"Data frame day year month leap year.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/doyLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of year for leap years — doyLeap","text":"","code":"doyLeap"},{"path":"https://adamlilith.github.io/omnibus/reference/doyLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Day of year for leap years — doyLeap","text":"object class 'data.frame'.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/doyLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of year for leap years — doyLeap","text":"","code":"data(doyLeap) doyLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     61     92    122    153    183    214    245     275 #> 2       2     33     62     93    123    154    184    215    246     276 #> 3       3     34     63     94    124    155    185    216    247     277 #> 4       4     35     64     95    125    156    186    217    248     278 #> 5       5     36     65     96    126    157    187    218    249     279 #> 6       6     37     66     97    127    158    188    219    250     280 #> 7       7     38     67     98    128    159    189    220    251     281 #> 8       8     39     68     99    129    160    190    221    252     282 #> 9       9     40     69    100    130    161    191    222    253     283 #> 10     10     41     70    101    131    162    192    223    254     284 #> 11     11     42     71    102    132    163    193    224    255     285 #> 12     12     43     72    103    133    164    194    225    256     286 #> 13     13     44     73    104    134    165    195    226    257     287 #> 14     14     45     74    105    135    166    196    227    258     288 #> 15     15     46     75    106    136    167    197    228    259     289 #> 16     16     47     76    107    137    168    198    229    260     290 #> 17     17     48     77    108    138    169    199    230    261     291 #> 18     18     49     78    109    139    170    200    231    262     292 #> 19     19     50     79    110    140    171    201    232    263     293 #> 20     20     51     80    111    141    172    202    233    264     294 #> 21     21     52     81    112    142    173    203    234    265     295 #> 22     22     53     82    113    143    174    204    235    266     296 #> 23     23     54     83    114    144    175    205    236    267     297 #> 24     24     55     84    115    145    176    206    237    268     298 #> 25     25     56     85    116    146    177    207    238    269     299 #> 26     26     57     86    117    147    178    208    239    270     300 #> 27     27     58     87    118    148    179    209    240    271     301 #> 28     28     59     88    119    149    180    210    241    272     302 #> 29     29     60     89    120    150    181    211    242    273     303 #> 30     30     NA     90    121    151    182    212    243    274     304 #> 31     31     NA     91     NA    152     NA    213    244     NA     305 #>    month11 month12 #> 1      306     336 #> 2      307     337 #> 3      308     338 #> 4      309     339 #> 5      310     340 #> 6      311     341 #> 7      312     342 #> 8      313     343 #> 9      314     344 #> 10     315     345 #> 11     316     346 #> 12     317     347 #> 13     318     348 #> 14     319     349 #> 15     320     350 #> 16     321     351 #> 17     322     352 #> 18     323     353 #> 19     324     354 #> 20     325     355 #> 21     326     356 #> 22     327     357 #> 23     328     358 #> 24     329     359 #> 25     330     360 #> 26     331     361 #> 27     332     362 #> 28     333     363 #> 29     334     364 #> 30     335     365 #> 31      NA     366"},{"path":"https://adamlilith.github.io/omnibus/reference/doyNonLeap.html","id":null,"dir":"Reference","previous_headings":"","what":"Days of year for non-leap years — doyNonLeap","title":"Days of year for non-leap years — doyNonLeap","text":"Data frame days year month non-leap year","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/doyNonLeap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"doyNonLeap"},{"path":"https://adamlilith.github.io/omnibus/reference/doyNonLeap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Days of year for non-leap years — doyNonLeap","text":"object class 'data.frame'.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/doyNonLeap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Days of year for non-leap years — doyNonLeap","text":"","code":"data(doyNonLeap) doyNonLeap #>    month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 #> 1       1     32     60     91    121    152    182    213    244     274 #> 2       2     33     61     92    122    153    183    214    245     275 #> 3       3     34     62     93    123    154    184    215    246     276 #> 4       4     35     63     94    124    155    185    216    247     277 #> 5       5     36     64     95    125    156    186    217    248     278 #> 6       6     37     65     96    126    157    187    218    249     279 #> 7       7     38     66     97    127    158    188    219    250     280 #> 8       8     39     67     98    128    159    189    220    251     281 #> 9       9     40     68     99    129    160    190    221    252     282 #> 10     10     41     69    100    130    161    191    222    253     283 #> 11     11     42     70    101    131    162    192    223    254     284 #> 12     12     43     71    102    132    163    193    224    255     285 #> 13     13     44     72    103    133    164    194    225    256     286 #> 14     14     45     73    104    134    165    195    226    257     287 #> 15     15     46     74    105    135    166    196    227    258     288 #> 16     16     47     75    106    136    167    197    228    259     289 #> 17     17     48     76    107    137    168    198    229    260     290 #> 18     18     49     77    108    138    169    199    230    261     291 #> 19     19     50     78    109    139    170    200    231    262     292 #> 20     20     51     79    110    140    171    201    232    263     293 #> 21     21     52     80    111    141    172    202    233    264     294 #> 22     22     53     81    112    142    173    203    234    265     295 #> 23     23     54     82    113    143    174    204    235    266     296 #> 24     24     55     83    114    144    175    205    236    267     297 #> 25     25     56     84    115    145    176    206    237    268     298 #> 26     26     57     85    116    146    177    207    238    269     299 #> 27     27     58     86    117    147    178    208    239    270     300 #> 28     28     59     87    118    148    179    209    240    271     301 #> 29     29     NA     88    119    149    180    210    241    272     302 #> 30     30     NA     89    120    150    181    211    242    273     303 #> 31     31     NA     90     NA    151     NA    212    243     NA     304 #>    month11 month12 #> 1      305     335 #> 2      306     336 #> 3      307     337 #> 4      308     338 #> 5      309     339 #> 6      310     340 #> 7      311     341 #> 8      312     342 #> 9      313     343 #> 10     314     344 #> 11     315     345 #> 12     316     346 #> 13     317     347 #> 14     318     348 #> 15     319     349 #> 16     320     350 #> 17     321     351 #> 18     322     352 #> 19     323     353 #> 20     324     354 #> 21     325     355 #> 22     326     356 #> 23     327     357 #> 24     328     358 #> 25     329     359 #> 26     330     360 #> 27     331     361 #> 28     332     362 #> 29     333     363 #> 30     334     364 #> 31      NA     365"},{"path":"https://adamlilith.github.io/omnibus/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The smallest machine-readable number — eps","title":"The smallest machine-readable number — eps","text":"function returns smallest machine-readable number (equal .Machine$double.eps).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The smallest machine-readable number — eps","text":"","code":"eps()"},{"path":"https://adamlilith.github.io/omnibus/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The smallest machine-readable number — eps","text":"Numeric value.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The smallest machine-readable number — eps","text":"","code":"eps() #> [1] 2.220446e-16"},{"path":"https://adamlilith.github.io/omnibus/reference/expandUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unit abbreviations to proper unit names — expandUnits","title":"Convert unit abbreviations to proper unit names — expandUnits","text":"function converts abbreviations length area units (e.g., \"m\", \"km\", \"ha\") proper names (e.g., \"meters\", \"kilometers\", \"hectares\"). Square areal units specified using appended \"2\", appropriate (e.g., \"m2\" means \"meters-squared\" converted \"meters2\").","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/expandUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unit abbreviations to proper unit names — expandUnits","text":"","code":"expandUnits(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/expandUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unit abbreviations to proper unit names — expandUnits","text":"x Character: Abbreviations convert. Case ignored. 'm' converted 'meters' 'm2' converted 'meters2' 'km' converted 'kilometers' 'km2' converted 'kilometers2' 'mi' converted 'miles' 'mi2' converted 'miles2' 'ft' converted 'feet' 'ft2' converted 'feet2' 'yd' converted 'yards' 'yd2' converted 'yards2' 'ac' converted 'acres' 'ha' converted 'hectares' 'nmi' converted 'nautical miles' 'nmi2' converted 'nautical miles2'","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/expandUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert unit abbreviations to proper unit names — expandUnits","text":"","code":"expandUnits(c('m', 'm2', 'ac', 'nm2')) #> [1] \"meters\"  \"meters2\" \"acres\"   \"nm2\""},{"path":"https://adamlilith.github.io/omnibus/reference/forwardSlash.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace backslash with forward slash — forwardSlash","title":"Replace backslash with forward slash — forwardSlash","text":"function helpful Windows systems, paths usually expressed left slashes, whereas R requires right slashes.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/forwardSlash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace backslash with forward slash — forwardSlash","text":"","code":"forwardSlash(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/forwardSlash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace backslash with forward slash — forwardSlash","text":"x string.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/forwardSlash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace backslash with forward slash — forwardSlash","text":"Character.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/forwardSlash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace backslash with forward slash — forwardSlash","text":"","code":"forwardSlash(\"C:\\\\ecology\\\\main project\") #> [1] \"C:/ecology/main project\""},{"path":"https://adamlilith.github.io/omnibus/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert values into a vector — insert","title":"Insert values into a vector — insert","text":"function inserts values vector, lengthening overall vector. different , say, x[1:3] <- c('', 'b', 'c') simply replaces values indices 1 3.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert values into a vector — insert","text":"","code":"insert(x, into, at, warn = TRUE)"},{"path":"https://adamlilith.github.io/omnibus/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert values into a vector — insert","text":"x Vector numeric, integer, character, values class x inserted. Vector values insert x. Vector positions (indices) x inserted. length x shorter length , values x recycled warning produced. warn TRUE, provide warnings.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert values into a vector — insert","text":"Vector.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert values into a vector — insert","text":"","code":"x <- -1:-3 into <- 10:20 at <- c(1, 3, 14) insert(x, into, at) #>  [1] -1 10 -2 11 12 13 14 15 16 17 18 19 20 -3  insert(-1, into, at) #> Warning: Length of x is shorter than the length of at. Recycling x. #>  [1] -1 10 -1 11 12 13 14 15 16 17 18 19 20 -1"},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a column or row into a data frame or matrix — insertCol","title":"Insert a column or row into a data frame or matrix — insertCol","text":"function inserts one columns rows another column row data frame matrix. similar cbind except inserted column(s)/row(s) can placed anywhere.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"insertCol(x, into, at = NULL, before = TRUE)  insertRow(x, into, at = NULL, before = TRUE)"},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a column or row into a data frame or matrix — insertCol","text":"x Data frame, matrix, vector number columns rows elements . Data frame matrix x inserted. Character, integer, NULL. Name column column number name row row number insertion. NULL (default), result exactly cbind(, x except retains row numbers column names . Logical, TRUE (default) insertion occur front column row named , FALSE . Ignored NULL.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a column or row into a data frame or matrix — insertCol","text":"data frame.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Insert a column or row into a data frame or matrix — insertCol","text":"insertRow(): Insert column row data frame matrix","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/insertCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a column or row into a data frame or matrix — insertCol","text":"","code":"x <- data.frame(y1=11:15, y2=rev(letters)[1:5]) into <- data.frame(x1=1:5, x2='valid', x3=letters[1:5], x4=LETTERS[1:5], x5='stuff')  insertCol(x, into=into, at='x3') #>   x1    x2 y1 y2 x3 x4    x5 #> 1  1 valid 11  z  a  A stuff #> 2  2 valid 12  y  b  B stuff #> 3  3 valid 13  x  c  C stuff #> 4  4 valid 14  w  d  D stuff #> 5  5 valid 15  v  e  E stuff insertCol(x, into=into, at='x3', before=FALSE) #>   x1    x2 x3 y1 y2 x4    x5 #> 1  1 valid  a 11  z  A stuff #> 2  2 valid  b 12  y  B stuff #> 3  3 valid  c 13  x  C stuff #> 4  4 valid  d 14  w  D stuff #> 5  5 valid  e 15  v  E stuff insertCol(x, into) #>   x1    x2 x3 x4    x5 y1 y2 #> 1  1 valid  a  A stuff 11  z #> 2  2 valid  b  B stuff 12  y #> 3  3 valid  c  C stuff 13  x #> 4  4 valid  d  D stuff 14  w #> 5  5 valid  e  E stuff 15  v  x <- data.frame(x1=1:3, x2=LETTERS[1:3]) into <- data.frame(x1=11:15, x2='valid') row.names(into) <- letters[1:5]  insertRow(x, into=into, at='b') #>   x1    x2 #> a 11 valid #> 1  1     A #> 2  2     B #> 3  3     C #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into=into, at='b', before=FALSE) #>   x1    x2 #> a 11 valid #> b 12 valid #> 1  1     A #> 2  2     B #> 3  3     C #> c 13 valid #> d 14 valid #> e 15 valid insertRow(x, into) #>   x1    x2 #> a 11 valid #> b 12 valid #> c 13 valid #> d 14 valid #> e 15 valid #> 1  1     A #> 2  2     B #> 3  3     C"},{"path":"https://adamlilith.github.io/omnibus/reference/is.wholeNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a numeric value is a whole number — is.wholeNumber","title":"Test if a numeric value is a whole number — is.wholeNumber","text":"Sometimes numeric values can appear whole numbers actually represented computer floating-point values. cases, simple inspection value tell whole number . function tests number \"close enough\" integer whole number. Note .integer indicate value class integer (, always whole number), objects class numeric evaluate TRUE even \"supposed\" represent integers.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/is.wholeNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a numeric value is a whole number — is.wholeNumber","text":"","code":"is.wholeNumber(x, tol = .Machine$double.eps^0.5)"},{"path":"https://adamlilith.github.io/omnibus/reference/is.wholeNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a numeric value is a whole number — is.wholeNumber","text":"x numeric integer vector. tol Largest absolute difference value integer representation considered whole number.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/is.wholeNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a numeric value is a whole number — is.wholeNumber","text":"logical vector.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/is.wholeNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a numeric value is a whole number — is.wholeNumber","text":"","code":"x <- c(4, 12 / 3, 21, 21.1) is.wholeNumber(x) #> [1]  TRUE  TRUE  TRUE FALSE"},{"path":"https://adamlilith.github.io/omnibus/reference/isLeapYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a year a leap year? — isLeapYear","title":"Is a year a leap year? — isLeapYear","text":"Returns TRUE year leap year. can use \"negative\" years BCE.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isLeapYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/isLeapYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a year a leap year? — isLeapYear","text":"x Integer vector integers representing years.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isLeapYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a year a leap year? — isLeapYear","text":"Vector logical values.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isLeapYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a year a leap year? — isLeapYear","text":"","code":"isLeapYear(1990:2004) # note 2000 *was* not a leap year #>  [1] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE #> [13] FALSE FALSE  TRUE isLeapYear(1896:1904) # 1900 was *not* a leap year #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized test for truth robust to NA — isTRUENA","title":"Vectorized test for truth robust to NA — isTRUENA","text":"functions work exactly x == TRUE x == FALSE default return FALSE cases NA.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"isTRUENA(x, ifNA = FALSE)  isFALSENA(x, ifNA = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized test for truth robust to NA — isTRUENA","text":"x Logical, condition evaluates logical, vector logical values conditions evaluate. ifNA Logical, value return result evaluating x NA. Note can anything (.e., TRUE, FALSE, number, etc.).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized test for truth robust to NA — isTRUENA","text":"Logical value specified ifNA.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Vectorized test for truth robust to NA — isTRUENA","text":"isFALSENA(): Vectorized test truth robust NA","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/isTRUENA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized test for truth robust to NA — isTRUENA","text":"","code":"x <- c(TRUE, TRUE, FALSE, NA) x == TRUE #> [1]  TRUE  TRUE FALSE    NA isTRUENA(x) #> [1]  TRUE  TRUE FALSE FALSE x == FALSE #> [1] FALSE FALSE  TRUE    NA isFALSENA(x) #> [1] FALSE FALSE  TRUE FALSE isTRUENA(x, ifNA = Inf) #> [1]   1   1   0 Inf # note that isTRUE and isFALSE are not vectorized isTRUE(x) #> [1] FALSE isFALSE(x) #> [1] FALSE"},{"path":"https://adamlilith.github.io/omnibus/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement for list.files() — listFiles","title":"Replacement for list.files() — listFiles","text":"function slightly friendlier version list.files automatically includes full.names=TRUE argument.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement for list.files() — listFiles","text":"","code":"listFiles(x, ...)"},{"path":"https://adamlilith.github.io/omnibus/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement for list.files() — listFiles","text":"x Path name folder containing files list. ... Arguments pass list.files (full.names).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replacement for list.files() — listFiles","text":"Character.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacement for list.files() — listFiles","text":"","code":"# list files in location where R is installed listFiles(R.home()) #>  [1] \"/opt/R/4.4.1/lib/R/COPYING\"      \"/opt/R/4.4.1/lib/R/SVN-REVISION\" #>  [3] \"/opt/R/4.4.1/lib/R/bin\"          \"/opt/R/4.4.1/lib/R/doc\"          #>  [5] \"/opt/R/4.4.1/lib/R/etc\"          \"/opt/R/4.4.1/lib/R/include\"      #>  [7] \"/opt/R/4.4.1/lib/R/lib\"          \"/opt/R/4.4.1/lib/R/library\"      #>  [9] \"/opt/R/4.4.1/lib/R/modules\"      \"/opt/R/4.4.1/lib/R/share\"        #> [11] \"/opt/R/4.4.1/lib/R/site-library\" listFiles(R.home(), pattern='README') #> character(0)"},{"path":"https://adamlilith.github.io/omnibus/reference/longRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of a particular value in a numeric vector — longRun","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"function returns lengh longest run particular numeric value numeric vector.  \"run\" uninterrupted  sequence number. Runs can \"wrapped\" sequence starts ends target value considered consecutive run.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/longRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"longRun(x, val, wrap = FALSE, na.rm = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/longRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"x Numeric vector. val Numeric. Value elements x calculate length longest run. wrap Logical. TRUE runs can \"wrap\" end x start x first last elements x equal val. na.rm Logical. TRUE remove NAs first.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/longRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"Integer.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/longRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of a particular value in a numeric vector — longRun","text":"","code":"x <- c(1, 1, 1, 2, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1) longRun(x, 2) #> [1] 2 longRun(x, 1) #> [1] 5 longRun(x, 1, wrap=TRUE) #> [1] 8"},{"path":"https://adamlilith.github.io/omnibus/reference/maxRuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum number of continuous ","title":"Maximum number of continuous ","text":"Consider ordered set values, say 0, 4, 0, 0, 0, 2, 0, 10. can ask, \"number times zeros appear successively?\" function can answer question similar ones. considered \"run\" defined user-supplied function must TRUE/FALSE output. example, \"run\" succession values less two, case criterion function function(x) < 2, succession values equal 0, case function function(x) x != 0.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/maxRuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum number of continuous ","text":"","code":"maxRuns(x, fx, args = NULL, failIfAllNA = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/maxRuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum number of continuous ","text":"x Vector numeric, character, values. fx function returns TRUE, FALSE, (optionally) NA. function must use x first argument. example, function(x) x == 0 allowable, function(y) y == 0 . Values count TRUE counted toward run. args list object additional arguments supply function fx. failIfAllNA TRUE, fail values NA evaluated fx.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/maxRuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum number of continuous ","text":"Lengths successive runs elements meet criterion. single value 0 indicates conditions meet criterion.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/maxRuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum number of continuous ","text":"","code":"x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x) x == 0 maxRuns(x, fx) #> [1] 3  fx <- function(x) x > 0 maxRuns(x, fx) #> [1] 2   fx <- function(x) x > 0 & x < 5 maxRuns(x, fx) #> [1] 2  x <- c(1, 4, 0, 0, 0, 2, 0, 10) fx <- function(x, th) x == th maxRuns(x, fx, args=list(th=0)) #> [1] 3  # \"count\" NA as an observation  x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), FALSE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 3   # include NAs as part of a run x <- c(1, 4, 0, 0, 0, NA, 0, 10) fx <- function(x, th) ifelse(is.na(x), TRUE, x == th) maxRuns(x, fx, args=list(th=0)) #> [1] 5"},{"path":"https://adamlilith.github.io/omnibus/reference/memUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of objects taking most memory use — memUse","title":"Size of objects taking most memory use — memUse","text":"Displays largest objects memUse.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/memUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse(   n = 10,   orderBy = \"size\",   decreasing = TRUE,   pos = 1,   display = TRUE,   ... )"},{"path":"https://adamlilith.github.io/omnibus/reference/memUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of objects taking most memory use — memUse","text":"n Positive integer: Maximum number objects display. orderBy Either 'size' (default) 'name'. decreasing Logical, TRUE (default), objects displayed largest smallest. pos Environment obtain size objects. Default 1. See ls.#\" display TRUE (default), print table memUse used. ... arguments pass ls.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/memUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of objects taking most memory use — memUse","text":"Data frame (invisible).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/memUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of objects taking most memory use — memUse","text":"","code":"memUse() #>                   size #> conversionFactors 5032 #> domLeap           3648 #> domNonLeap        3648 #> doyLeap           3648 #> doyNonLeap        3648 memUse(3) #>                   size #> conversionFactors 5032 #> domLeap           3648 #> domNonLeap        3648"},{"path":"https://adamlilith.github.io/omnibus/reference/mergeLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two lists with precedence — mergeLists","title":"Merge two lists with precedence — mergeLists","text":"function merges two lists create single, combined list. two elements different lists name, items later list gain preference (e.g., three lists, values third list gain precedence items name second, second precedence items first).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mergeLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two lists with precedence — mergeLists","text":"","code":"mergeLists(...)"},{"path":"https://adamlilith.github.io/omnibus/reference/mergeLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two lists with precedence — mergeLists","text":"... Two lists.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mergeLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two lists with precedence — mergeLists","text":"list.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/mergeLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two lists with precedence — mergeLists","text":"","code":"list1 <- list(a=1:3, b='Hello world!', c=LETTERS[1:3]) list2 <- list(x=4, b='Goodbye world!', z=letters[1:2]) list3 <- list(x=44, b='What up, world?', z=c('_A_', '_Z_'), w = TRUE)  mergeLists(list1, list2) #> $x #> [1] 4 #>  #> $b #> [1] \"Goodbye world!\" #>  #> $z #> [1] \"a\" \"b\" #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world!\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>   mergeLists(list1, list2, list3) #> $x #> [1] 44 #>  #> $b #> [1] \"What up, world?\" #>  #> $z #> [1] \"_A_\" \"_Z_\" #>  #> $w #> [1] TRUE #>  #> $a #> [1] 1 2 3 #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  mergeLists(list3, list2, list1) #> $a #> [1] 1 2 3 #>  #> $b #> [1] \"Hello world!\" #>  #> $c #> [1] \"A\" \"B\" \"C\" #>  #> $x #> [1] 4 #>  #> $z #> [1] \"a\" \"b\" #>  #> $w #> [1] TRUE #>"},{"path":"https://adamlilith.github.io/omnibus/reference/mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip an object — mirror","title":"Flip an object — mirror","text":"function creates \"mirror\" image character string, number, matrix, data frame. example \"Shots exchanged hospital\" becomes \"latipsoh eht ta degnahcxe erew stohS' 3.14159 becomes 95141.3. Data frames matrices returned order columns order rows reversed.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip an object — mirror","text":"","code":"mirror(x, direction = \"lr\")"},{"path":"https://adamlilith.github.io/omnibus/reference/mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip an object — mirror","text":"x vector numeric character values, matrix data frame. direction used x matrix data frame. Accepted values 'lr' (left-right mirror) 'ud' (-mirror).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip an object — mirror","text":"Object class x.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip an object — mirror","text":"","code":"x <- 'Shots were exchanged at the hospital' mirror(x) #> [1] \"latipsoh eht ta degnahcxe erew stohS\"  x <- c('Water', 'water', 'everywhere') mirror(x) #> [1] \"retaW\"      \"retaw\"      \"erehwyreve\"  # last value will return NA because the exponentiation does not  # make sense when written backwards x <- c(3.14159, 2.71828, 6.02214076e+23)  mirror(x) #> Warning: NAs introduced by coercion #> [1] 95141.3 82817.2      NA x <- data.frame(x=1:5, y=6:10) mirror(x) #>    y x #> 1  6 1 #> 2  7 2 #> 3  8 3 #> 4  9 4 #> 5 10 5  x <- matrix(1:10, nrow=2) mirror(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    7    5    3    1 #> [2,]   10    8    6    4    2"},{"path":"https://adamlilith.github.io/omnibus/reference/mmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal value(s) — mmode","title":"Modal value(s) — mmode","text":"Modal value. one unique mode, modal values returned.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal value(s) — mmode","text":"","code":"mmode(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/mmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal value(s) — mmode","text":"x Numeric character vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal value(s) — mmode","text":"Numeric character vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/mmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal value(s) — mmode","text":"","code":"x <- c(1, 2, 3, 3, 4, 5, 3, 1, 2) mmode(x) #> [1] 3  x <- c(1, 2, 3) mmode(x) #> [1] 1 2 3"},{"path":"https://adamlilith.github.io/omnibus/reference/naCompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"function set operators perform simple (vectorized) comparisons using <, <=, >, >=, !=, == values always returns TRUE FALSE. TRUE occurs condition can evaluated TRUE. FALSE returned condition FALSE evaluated.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naCompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare(op, x, y)  x %<na% y  x %<=na% y  x %==na% y  x %!=na% y  x %>na% y  x %>=na% y"},{"path":"https://adamlilith.github.io/omnibus/reference/naCompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"op Character, operation perform: '<', '<=', '>', '>=', '!=', '=='. Note must character (.e., put quotes). x, y Vectors numeric, character, NA, /NaN values. first value operation x XXX y XXX operator op. x shorter y x recycled.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naCompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"Vector logical values.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naCompare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare values using <, <=, >, >=, !=, and == (robust to NAs) — naCompare","text":"","code":"naCompare('<', c(1, 2, NA), c(10, 1, 0)) #> [1]  TRUE FALSE FALSE naCompare('<', c(1, 2, NA), 10) #> [1]  TRUE  TRUE FALSE naCompare('<', c(1, 2, NA), NA) #> [1] FALSE FALSE FALSE # compare to: NA < 5 #> [1] NA NA < NA #> [1] NA  # same operations with operators: 1 %<na% 2 #> [1] TRUE 1 %<na% NA #> [1] FALSE 3 %==na% 3 #> [1] TRUE NA %==na% 3 #> [1] FALSE 4 %!=na% 4 #> [1] FALSE 4 %!=na% NA #> [1] FALSE 5 %>=na% 3 #> [1] TRUE 5 %>=na% NA #> [1] FALSE 3 %==na% c(NA, 1, 2, 3, 4) #> [1] FALSE FALSE FALSE  TRUE FALSE  # compare to: 1 < 2 #> [1] TRUE 1 < NA #> [1] NA 3 == 3 #> [1] TRUE NA == 3 #> [1] NA 4 != 4 #> [1] FALSE 4 != NA #> [1] NA 5 >= 3 #> [1] TRUE 5 >= NA #> [1] NA 3 == c(NA, 1, 2, 3, 4) #> [1]    NA FALSE FALSE  TRUE FALSE"},{"path":"https://adamlilith.github.io/omnibus/reference/naOmitMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NAs from one or more equal-length vectors — naOmitMulti","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"function removes elements one equal-length vectors one NA position. example, three vectors , B, C, NA first position C NA third position, , B, C elements positions 1 3 removed.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naOmitMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"naOmitMulti(...)"},{"path":"https://adamlilith.github.io/omnibus/reference/naOmitMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"... Numeric character vectors.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naOmitMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"List objects class ....","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/naOmitMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove NAs from one or more equal-length vectors — naOmitMulti","text":"","code":"a <- c(NA, 'b', 'c', 'd', 'e', NA) b <- c(1, 2, 3, NA, 5, NA) c <- c(6, 7, 8, 9, 10, NA) naOmitMulti(a, b, c) #> [[1]] #> [1] \"b\" \"c\" \"e\" #>  #> [[2]] #> [1] 2 3 5 #>  #> [[3]] #> [1]  7  8 10 #>"},{"path":"https://adamlilith.github.io/omnibus/reference/naRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of rows in a data frame or matrix that contain at least one NA — naRows","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"function returns row number row data frame matrix least one NA. (!complete.cases(x)).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"naRows(x, inf = FALSE, inverse = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/naRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"x Data frame matrix. inf Logical, TRUE also return row numbers rows least one element Inf -Inf. default FALSE. inverse Logical, TRUE return row numbers rows NAs (possibly Inf -Inf).  default FALSE.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"Integer vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/naRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of rows in a data frame or matrix that contain at least one NA — naRows","text":"","code":"x <- data.frame(a=1:5, b=c(1, 2, NA, 4, 5), c=c('a', 'b', 'c', 'd', NA)) naRows(x) #> [1] 3 5"},{"path":"https://adamlilith.github.io/omnibus/reference/notIn.html","id":null,"dir":"Reference","previous_headings":"","what":"Opposite of '%in%' — notIn","title":"Opposite of '%in%' — notIn","text":"Indicate elements vector another vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/notIn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opposite of '%in%' — notIn","text":"","code":"notIn(x, table)  x %notin% table"},{"path":"https://adamlilith.github.io/omnibus/reference/notIn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opposite of '%in%' — notIn","text":"x, table Vectors.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/notIn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opposite of '%in%' — notIn","text":"logical vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/notIn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opposite of '%in%' — notIn","text":"","code":"x <- c('a', 'v', 'o', 'C', 'a', 'd', 'O') y <- letters  y %notin% x #>  [1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE #> [25]  TRUE  TRUE x %notin% y #> [1] FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE"},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"omnibus: Fantabulous helper functions — omnibus","title":"omnibus: Fantabulous helper functions — omnibus","text":"package contains set helper functions.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"omnibus: Fantabulous helper functions — omnibus","text":"Create issue GitHub.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"data-manipulation-and-properties","dir":"Reference","previous_headings":"","what":"Data manipulation and properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"appendLists: Merge lists, appending elements name. bracket: Find values bracket given number. combineDf: Combine data frames different schema. compareFloat: Compare values floating-point precision. corner: Corner matrix data frame. convertUnits: Convert length areal units. conversionFactors: Data frame conversion factors length areal units. cull: Force vectors matrices/data frames length number rows. expandUnits: Convert unit abbreviations proper unit names. insert: Insert values vector. insertCol insertRow: Insert column(s)/row(s) matrix data frame. maxRuns: Maximum number continuous \"runs\" values meeting particular condition. mirror: Flip object left-right (-). mmode: Modal value(s). mergeLists: Merge lists, precedence elements one list another names. notIn %notin%: Opposite %%. renameCol: Rename column. renumSeq: Renumber sequence. rotateMatrix: Rotate matrix. roundTo: Rounds value nearest target value. rowColIndexing: Convert row column indexing matrix. side: Left/right side data frame matrix. stretchMinMax: Rescale values given range. unlistRecursive: object list also list, unlist . unragMatrix: Turn \"ragged\" matrix \"ragged\" vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"dates","dir":"Reference","previous_headings":"","what":"Dates","title":"omnibus: Fantabulous helper functions — omnibus","text":"domLeap: Data frame days month leap year. domNonLeap: Data frame days month non-leap year. doyLeap: Data frame days year leap year. doyNonLeap: Data frame days year non-leap year. isLeapYear: year leap year?  yearFromDate: Attempt find year across dates non-standard formats.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"geometry","dir":"Reference","previous_headings":"","what":"Geometry","title":"omnibus: Fantabulous helper functions — omnibus","text":"pairDist: Pairwise Euclidean distance two sets points. quadArea: Area quadrilateral.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"handling-nas","dir":"Reference","previous_headings":"","what":"Handling NAs","title":"omnibus: Fantabulous helper functions — omnibus","text":"%<=na%, %==na%, %!=na%, %>na%, %>=na%: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). isTRUENA isFALSENA: Logical operators robust NA. naCompare: Comparative operations (>, >=, ==, !=, <, <=) returns FALSE NA cases (versus NA). naOmitMulti: Remove elements multiple vectors least one element NA rows matrices/data frames least one row NA. naRows: Indices rows least one NA. (!complete.cases(x)).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"data-properties","dir":"Reference","previous_headings":"","what":"Data properties","title":"omnibus: Fantabulous helper functions — omnibus","text":"countDecDigits: Count number digits decimal. longRun: Longest run given sequence vector. .wholeNumber: value whole number within floating-point precision?. roundedSigDigits: Infers number significant digits represented decimal representation division operation digits place integer rounded. .pmax .pmin: Combine .max pmax, .min pmin (vectorized .max .min).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"system","dir":"Reference","previous_headings":"","what":"System","title":"omnibus: Fantabulous helper functions — omnibus","text":"dirCreate: Nicer version dir.create. eps: Smallest floating point value computer can think . listFiles: Nicer version list.files. memUse: Display largest objects memory.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"text","dir":"Reference","previous_headings":"","what":"Text","title":"omnibus: Fantabulous helper functions — omnibus","text":"capIt: Capitalize first letter string. forwardSlash: Replace backslash forward slash. pmatchSafe: Partial matching strings error checking. prefix: Add repeating character string ensure user-defined length (e.g., 7 –> 007). rstring: Make nearly-guaranteed unique string. say: Replacement print('abc'); flush.console.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/omnibus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omnibus: Fantabulous helper functions — omnibus","text":"Adam B. Smith","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pairDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distances between two matrices or data frames. — pairDist","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"function takes two data frames matrices returns matrix pairwise Euclidean distances two.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pairDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"pairDist(x1, x2 = NULL, na.rm = FALSE)"},{"path":"https://adamlilith.github.io/omnibus/reference/pairDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"x1 Data frame matrix one columns wide. x2 Data frame matrix one columns wide. NULL, pairwise distances points x1 calculated. na.rm Logical, TRUE rows x1 x2 least one NA removed first.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pairDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"Matrix nrow(x1) rows nrow(x2) columns. Values distance row x1 row x2.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/pairDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pairwise distances between two matrices or data frames. — pairDist","text":"","code":"x1 <- data.frame(x=sample(1:30, 30), y=sort(round(100 * rnorm(30))), z=sample(1:30, 30)) x2 <- data.frame(x=1:20, y=round(100 * rnorm(20)), z=sample(1:20, 20)) pairDist(x1, x2) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]       [,7] #>  [1,]  23.79075  44.73254 219.05707 325.01231 215.59685 323.44706 243.298171 #>  [2,]  25.31798  45.89118 219.36499 325.24145 215.38106 323.25068 243.164553 #>  [3,]  34.55431  29.06888 181.34498 286.48735 176.64088 283.93309 204.249847 #>  [4,]  76.22336  53.63767 122.49898 228.37031 118.00847 226.01770 146.061631 #>  [5,]  91.97282  69.97142 114.24097 218.55434 110.64809 216.78791 137.240665 #>  [6,] 106.30146  83.34867  92.39048 198.22462  88.29496 196.14790 116.034478 #>  [7,] 139.14740 116.05602  59.04236 165.03030  56.08921 163.44418  83.318665 #>  [8,] 144.73769 121.71278  60.63827 163.42582  59.57348 162.64378  83.743656 #>  [9,] 147.97973 125.06398  58.90671 160.85086  57.04384 159.66841  81.030858 #> [10,] 146.49573 123.50708  53.18834 158.41086  49.16299 156.36176  76.295478 #> [11,] 149.12411 126.32102  50.45790 155.64382  45.09989 153.05555  73.280284 #> [12,] 157.70225 135.02963  45.09989 148.38800  37.81534 145.14131  65.741920 #> [13,] 161.61683 138.48827  42.00000 144.90342  41.85690 144.13188  65.145990 #> [14,] 166.70333 143.66976  38.70400 140.29612  37.28270 138.97482  60.216277 #> [15,] 169.05620 146.35231  36.76955 137.80058  28.91366 134.48420  55.497748 #> [16,] 175.69007 152.53852  25.19921 129.28264  26.43861 128.40950  49.020404 #> [17,] 178.75682 155.63097  29.08608 128.32381  31.40064 127.80454  50.099900 #> [18,] 181.99725 159.07231  25.03997 124.36237  20.46949 121.95491  43.023250 #> [19,] 183.80696 160.82910  28.01785 123.98387  27.00000 122.34786  45.000000 #> [20,] 189.95789 167.24533  29.52965 119.33566  22.89105 115.92239  39.899875 #> [21,] 195.17684 171.99128  16.06238 110.81967  24.69818 110.92340  34.554305 #> [22,] 214.01869 191.06805  17.88854  90.55937  20.49390  88.19297   8.944272 #> [23,] 228.03509 205.12191  31.68596  77.00000  34.29286  74.22937   8.717798 #> [24,] 244.93469 221.90539  49.80964  62.76942  53.74942  61.16371  27.294688 #> [25,] 257.45097 234.34590  62.42596  52.63079  67.86015  53.63767  41.291646 #> [26,] 264.57891 241.70436  68.92024  45.08880  70.92249  39.34463  43.520110 #> [27,] 277.26161 254.17514  79.33473  27.65863  84.32082  29.42788  55.982140 #> [28,] 332.08734 309.05825 134.12681  28.72281 138.32570  31.68596 110.118118 #> [29,] 359.85275 336.71501 162.14191  57.62812 167.24234  63.38770 138.888444 #> [30,] 446.05045 423.07210 248.19549 142.45701 252.02579 144.05902 224.002232 #>             [,8]      [,9]     [,10]      [,11]     [,12]     [,13]     [,14] #>  [1,] 252.168594 180.20266 208.90428 182.956279 383.09398 321.33938 266.87076 #>  [2,] 252.099187 180.09997 208.35067 182.318403 383.01697 321.04517 266.27242 #>  [3,] 213.187711 141.70745 169.08282 143.139792 343.59715 281.48357 226.51711 #>  [4,] 155.167651  83.44459 111.23399  85.340494 286.25338 224.18965 169.36942 #>  [5,] 145.794376  75.16648 103.22790  77.858847 275.60479 213.91120 159.71537 #>  [6,] 125.008000  53.03772  81.50460  55.614746 256.04882 194.06442 139.44892 #>  [7,]  92.135769  20.61553  50.24938  26.248809 223.11208 161.39703 107.43370 #>  [8,]  91.662424  26.64583  53.34791  33.256578 220.65357 159.51802 106.70052 #>  [9,]  88.977525  25.63201  50.28916  30.740852 217.73608 156.44488 103.34409 #> [10,]  85.146932  13.63818  42.30839  17.606817 216.02315 154.05194  99.61426 #> [11,]  82.516665  14.59452  38.94868  15.132746 213.46897 151.42985  96.82975 #> [12,]  75.026662  13.30413  30.08322   5.000000 205.55048 143.23756  88.05680 #> [13,]  73.013697  15.65248  36.59235  23.430749 202.36848 141.15594  88.46468 #> [14,]  68.154237  16.76305  31.25700  21.189620 197.37021 135.90070  82.71638 #> [15,]  64.583280  17.00000  20.27313   9.433981 194.56875 132.24598  77.05842 #> [16,]  57.026310  18.60108  23.40940  23.622024 187.13097 125.78553  73.10951 #> [17,]  57.280014  25.23886  28.23119  29.748950 185.54514 124.56725  72.78736 #> [18,]  51.458721  24.77902  14.14214  23.021729 181.24569 119.22248  64.90763 #> [19,]  52.440442  28.87906  22.49444  29.359837 180.55470 119.05461  66.09841 #> [20,]  47.864392  35.56684  17.05872  31.384710 175.05713 112.98230  58.49786 #> [21,]  40.755368  38.40573  27.22132  41.509035 168.51409 107.87493  57.70615 #> [22,]  17.972201  55.47071  28.75761  53.935146 148.39474  86.58522  33.85262 #> [23,]   9.110434  69.72087  42.27292  67.860150 134.68853  73.00000  22.22611 #> [24,]  19.339080  86.01163  59.68249  84.581322 118.42297  57.14893  16.15549 #> [25,]  32.526912  98.92421  73.95945  98.295473 107.17276  48.33218  27.76689 #> [26,]  35.397740 105.80643  77.23341 103.126136  98.93938  36.61967  19.13113 #> [27,]  46.572524 118.15668  91.59148 117.102519  85.11757  25.67100  36.93237 #> [28,] 101.019800 173.00578 145.50945 171.379695  30.28201  32.93934  88.17029 #> [29,] 129.510617 200.84073 174.28999 199.822421  15.52417  62.82515 117.45637 #> [30,] 215.039531 287.05052 259.08686 285.071921  84.43933 146.12324 201.24363 #>           [,15]     [,16]     [,17]     [,18]     [,19]     [,20] #>  [1,] 248.05443 136.40015 302.40040  72.58788 176.03977 234.47175 #>  [2,] 247.34187 136.09555 302.02152  70.41307 175.14851 234.07264 #>  [3,] 207.51145  97.88258 262.34329 110.56672 135.40310 194.57903 #>  [4,] 150.52242  42.53234 205.45072 167.58580  79.43551 138.29317 #>  [5,] 140.96099  31.30495 194.59959 178.80716  68.78227 126.41202 #>  [6,] 120.65239  13.37909 175.18562 197.26885  49.19350 107.68008 #>  [7,]  89.02247  26.47640 142.63239 230.58404  22.40536  75.50497 #>  [8,]  88.69047  29.56349 140.21056 234.02137  23.85372  71.95832 #>  [9,]  85.19977  32.69557 137.06203 236.82272  20.44505  68.82587 #> [10,]  80.91971  31.71750 135.07405 237.12866  11.18034  67.48333 #> [11,]  78.24960  39.00000 132.94360 240.53482  17.83255  67.38694 #> [12,]  69.11584  45.96738 124.54718 248.17131  11.04536  58.93216 #> [13,]  70.68946  45.63989 121.94261 251.72008  18.97367  53.76802 #> [14,]  64.69158  50.52722 116.58473 256.43128  17.49286  48.25971 #> [15,]  58.04309  55.66866 113.35784 259.05019  15.36229  47.52894 #> [16,]  55.62374  60.26608 106.79419 266.54831  26.73948  39.29377 #> [17,]  55.79426  62.71363 105.29957 268.76198  29.89983  37.37646 #> [18,]  46.36809  66.60330 100.04499 272.03676  27.18455  32.55764 #> [19,]  48.43552  67.74954  99.65440 273.33862  30.54505  31.59114 #> [20,]  39.96248  75.33260  93.79765 279.16124  35.15679  29.03446 #> [21,]  42.53234  79.65551  88.89319 285.87585  45.45327  23.25941 #> [22,]  19.20937 100.25468  68.45436 305.38337  62.12890  18.41195 #> [23,]  15.77973 114.52074  55.44367 319.45422  76.15773  25.82634 #> [24,]  24.45404 129.17430  37.66962 335.14474  90.40465  31.08054 #> [25,]  39.69887 141.41428  29.74895 347.53705 103.58089  44.02272 #> [26,]  38.06573 149.85660  18.81489 355.02817 110.15444  53.03772 #> [27,]  54.65345 162.11416  12.08305 368.31644 123.91126  64.84597 #> [28,] 107.14943 217.18425  51.94228 423.19381 178.47689 119.62023 #> [29,] 136.15800 244.25601  80.28699 450.58739 206.17953 146.59127 #> [30,] 220.29072 331.27330 165.31485 537.11637 292.24818 233.49946 pairDist(x1) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]   0.00000  12.04159  49.17316  98.17332 110.67520 127.42841 160.08123 #>  [2,]  12.04159   0.00000  43.32436  97.87237 109.15127 127.15738 160.34026 #>  [3,]  49.17316  43.32436   0.00000  62.27359  69.43342  89.54329 122.96341 #>  [4,]  98.17332  97.87237  62.27359   0.00000  30.67572  30.82207  63.79655 #>  [5,] 110.67520 109.15127  69.43342  30.67572   0.00000  29.17190  57.73214 #>  [6,] 127.42841 127.15738  89.54329  30.82207  29.17190   0.00000  33.61547 #>  [7,] 160.08123 160.34026 122.96341  63.79655  57.73214  33.61547   0.00000 #>  [8,] 164.10058 163.84749 125.23179  72.09022  56.05355  42.15448  22.15852 #>  [9,] 167.46343 166.80827 127.42841  75.00667  58.24946  45.01111  24.77902 #> [10,] 167.38877 167.01497 128.25365  70.83078  61.69279  40.21194  11.35782 #> [11,] 170.79813 170.68392 132.77801  73.03424  69.26038  43.97727  15.16575 #> [12,] 179.30421 178.51891 139.22643  81.52300  74.73286  52.21111  24.81935 #> [13,] 181.51033 181.44145 142.90556  87.41853  74.15524  56.67451  26.79552 #> [14,] 186.77794 186.30352 146.99660  92.07606  78.33901  61.30253  31.87475 #> [15,] 190.37332 189.39113 149.51254  93.04837  83.77947  63.30877  34.78505 #> [16,] 196.09437 196.22946 157.95252 100.60318  89.91107  69.93568  37.16181 #> [17,] 198.63031 198.51700 159.72476 104.35516  90.80198  73.55270  42.42641 #> [18,] 202.78314 202.08414 162.36071 106.28735  94.86833  75.80897  45.00000 #> [19,] 204.02206 203.33716 163.54510 108.81636  95.08943  78.10890  47.86439 #> [20,] 210.82220 209.58292 169.01479 114.37657 102.15185  84.33267  55.26301 #> [21,] 215.26263 215.52494 177.27380 120.44916 108.65082  89.76636  57.00877 #> [22,] 235.32531 235.34018 196.78923 138.03623 130.14991 108.18503  75.35250 #> [23,] 249.44338 249.46543 210.88860 152.03289 144.37105 122.32743  89.54329 #> [24,] 265.55037 265.09998 225.37746 169.20106 157.23231 138.66867 106.37199 #> [25,] 277.66707 277.39863 237.87602 182.11260 169.18038 151.41004 118.96638 #> [26,] 285.80763 285.21395 245.35281 188.42505 178.27226 158.41086 126.26163 #> [27,] 298.03356 298.10233 259.13317 201.50930 191.05235 171.18995 138.12313 #> [28,] 353.07506 353.07081 313.86303 256.15620 246.01829 226.02212 193.03368 #> [29,] 380.27359 380.34852 341.09529 284.27803 272.48670 253.79913 220.76685 #> [30,] 467.18198 467.09528 427.58508 370.01757 359.87498 340.01912 307.11073 #>             [,8]       [,9]     [,10]     [,11]     [,12]      [,13]      [,14] #>  [1,] 164.100579 167.463429 167.38877 170.79813 179.30421 181.510330 186.777943 #>  [2,] 163.847490 166.808273 167.01497 170.68392 178.51891 181.441451 186.303516 #>  [3,] 125.231785 127.428411 128.25365 132.77801 139.22643 142.905563 146.996599 #>  [4,]  72.090221  75.006666  70.83078  73.03424  81.52300  87.418534  92.076056 #>  [5,]  56.053546  58.249464  61.69279  69.26038  74.73286  74.155243  78.339007 #>  [6,]  42.154478  45.011110  40.21194  43.97727  52.21111  56.674509  61.302528 #>  [7,]  22.158520  24.779023  11.35782  15.16575  24.81935  26.795522  31.874755 #>  [8,]   0.000000   6.403124  19.02630  31.89044  33.51119  18.788294  24.062419 #>  [9,]   6.403124   0.000000  18.62794  31.87475  31.01612  17.606817  20.832667 #> [10,]  19.026298  18.627936   0.00000  13.37909  16.40122  20.024984  22.912878 #> [11,]  31.890437  31.874755  13.37909   0.00000  13.03840  28.460499  30.364453 #> [12,]  33.511192  31.016125  16.40122  13.03840   0.00000  26.419690  24.657656 #> [13,]  18.788294  17.606817  20.02498  28.46050  26.41969   0.000000   8.124038 #> [14,]  24.062419  20.832667  22.91288  30.36445  24.65766   8.124038   0.000000 #> [15,]  37.429935  33.674916  24.91987  24.53569  12.56981  25.377155  20.149442 #> [16,]  35.468296  34.014703  30.69202  32.63434  28.44293  16.822604  15.000000 #> [17,]  35.142567  32.893768  34.94281  39.82462  34.29286  17.146428  13.564660 #> [18,]  42.731721  39.102430  35.74913  37.05401  27.51363  25.826343  19.104973 #> [19,]  41.279535  37.536649  38.60052  42.53234  33.74907  24.433583  17.521415 #> [20,]  51.971146  47.434165  45.17743  46.36809  35.01428  36.496575  28.879058 #> [21,]  52.962251  51.205468  50.60632  51.94228  46.49731  34.496377  31.400637 #> [22,]  77.129761  74.712783  68.79680  65.13064  58.25805  58.549125  54.055527 #> [23,]  91.241438  88.735562  83.02409  79.03164  72.04165  72.608539  67.985293 #> [24,] 102.722928  99.503769  98.45811  97.59611  88.96629  84.646323  79.164386 #> [25,] 114.043851 111.045036 111.30139 111.08105 102.82509  96.192515  91.109824 #> [26,] 124.791827 121.433109 118.46096 115.88788 107.13543 106.555150 100.866248 #> [27,] 135.959553 133.281657 131.22119 129.01163 121.49897 117.498936 112.756375 #> [28,] 191.115149 188.281704 186.07794 183.31939 175.58474 172.702056 167.779617 #> [29,] 217.092146 214.317521 213.73582 211.97170 204.19109 199.042709 194.273004 #> [30,] 305.067206 302.104287 300.08665 297.05723 289.13838 286.755994 281.710845 #>           [,15]     [,16]     [,17]      [,18]      [,19]     [,20]     [,21] #>  [1,] 190.37332 196.09437 198.63031 202.783135 204.022058 210.82220 215.26263 #>  [2,] 189.39113 196.22946 198.51700 202.084141 203.337158 209.58292 215.52494 #>  [3,] 149.51254 157.95252 159.72476 162.360710 163.545101 169.01479 177.27380 #>  [4,]  93.04837 100.60318 104.35516 106.287346 108.816359 114.37657 120.44916 #>  [5,]  83.77947  89.91107  90.80198  94.868330  95.089432 102.15185 108.65082 #>  [6,]  63.30877  69.93568  73.55270  75.808970  78.108898  84.33267  89.76636 #>  [7,]  34.78505  37.16181  42.42641  45.000000  47.864392  55.26301  57.00877 #>  [8,]  37.42993  35.46830  35.14257  42.731721  41.279535  51.97115  52.96225 #>  [9,]  33.67492  34.01470  32.89377  39.102430  37.536649  47.43416  51.20547 #> [10,]  24.91987  30.69202  34.94281  35.749126  38.600518  45.17743  50.60632 #> [11,]  24.53569  32.63434  39.82462  37.054015  42.532341  46.36809  51.94228 #> [12,]  12.56981  28.44293  34.29286  27.513633  33.749074  35.01428  46.49731 #> [13,]  25.37716  16.82260  17.14643  25.826343  24.433583  36.49658  34.49638 #> [14,]  20.14944  15.00000  13.56466  19.104973  17.521415  28.87906  31.40064 #> [15,]   0.00000  22.69361  26.87006  16.093477  23.086793  22.44994  37.60319 #> [16,]  22.69361   0.00000  10.04988  15.620499  16.431677  27.47726  20.02498 #> [17,]  26.87006  10.04988   0.00000  16.522712  11.445523  26.19160  18.49324 #> [18,]  16.09348  15.62050  16.52271   0.000000   9.273618  12.12436  23.00000 #> [19,]  23.08679  16.43168  11.44552   9.273618   0.000000  15.26434  20.22375 #> [20,]  22.44994  27.47726  26.19160  12.124356  15.264338   0.00000  28.80972 #> [21,]  37.60319  20.02498  18.49324  23.000000  20.223748  28.80972   0.00000 #> [22,]  48.74423  42.08325  44.51966  37.134889  40.211939  35.88872  29.69848 #> [23,]  62.38590  56.16939  57.98276  50.783856  53.301032  47.87484  42.02380 #> [24,]  77.44030  70.07139  67.90434  63.229740  62.161081  57.48913  52.27810 #> [25,]  91.30717  82.06095  79.12648  76.459139  74.337070  71.19691  63.09517 #> [26,]  96.01042  91.30717  90.38805  83.480537  83.958323  76.79844  74.69940 #> [27,] 110.69779 102.06371 100.84642  96.938125  96.358705  92.01087  83.58229 #> [28,] 164.76043 157.25457 156.00641 151.528875 151.105923 145.66400 138.83804 #> [29,] 193.04404 184.23083 182.04944 179.022345 177.586599 173.19931 165.05151 #> [30,] 278.26786 271.40744 269.96481 265.326214 264.835798 258.82233 252.88930 #>           [,22]     [,23]     [,24]     [,25]     [,26]     [,27]     [,28] #>  [1,] 235.32531 249.44338 265.55037 277.66707 285.80763 298.03356 353.07506 #>  [2,] 235.34018 249.46543 265.09998 277.39863 285.21395 298.10233 353.07081 #>  [3,] 196.78923 210.88860 225.37746 237.87602 245.35281 259.13317 313.86303 #>  [4,] 138.03623 152.03289 169.20106 182.11260 188.42505 201.50930 256.15620 #>  [5,] 130.14991 144.37105 157.23231 169.18038 178.27226 191.05235 246.01829 #>  [6,] 108.18503 122.32743 138.66867 151.41004 158.41086 171.18995 226.02212 #>  [7,]  75.35250  89.54329 106.37199 118.96638 126.26163 138.12313 193.03368 #>  [8,]  77.12976  91.24144 102.72293 114.04385 124.79183 135.95955 191.11515 #>  [9,]  74.71278  88.73556  99.50377 111.04504 121.43311 133.28166 188.28170 #> [10,]  68.79680  83.02409  98.45811 111.30139 118.46096 131.22119 186.07794 #> [11,]  65.13064  79.03164  97.59611 111.08105 115.88788 129.01163 183.31939 #> [12,]  58.25805  72.04165  88.96629 102.82509 107.13543 121.49897 175.58474 #> [13,]  58.54912  72.60854  84.64632  96.19252 106.55515 117.49894 172.70206 #> [14,]  54.05553  67.98529  79.16439  91.10982 100.86625 112.75637 167.77962 #> [15,]  48.74423  62.38590  77.44030  91.30717  96.01042 110.69779 164.76043 #> [16,]  42.08325  56.16939  70.07139  82.06095  91.30717 102.06371 157.25457 #> [17,]  44.51966  57.98276  67.90434  79.12648  90.38805 100.84642 156.00641 #> [18,]  37.13489  50.78386  63.22974  76.45914  83.48054  96.93812 151.52888 #> [19,]  40.21194  53.30103  62.16108  74.33707  83.95832  96.35870 151.10592 #> [20,]  35.88872  47.87484  57.48913  71.19691  76.79844  92.01087 145.66400 #> [21,]  29.69848  42.02380  52.27810  63.09517  74.69940  83.58229 138.83804 #> [22,]   0.00000  14.28286  36.01389  49.72927  52.13444  64.17164 118.21167 #> [23,]  14.28286   0.00000  27.58623  40.60788  39.31921  51.24451 104.47009 #> [24,]  36.01389  27.58623   0.00000  15.29706  24.59675  35.34119  89.11229 #> [25,]  49.72927  40.60788  15.29706   0.00000  25.07987  26.28688  78.51751 #> [26,]  52.13444  39.31921  24.59675  25.07987   0.00000  22.22611  69.51259 #> [27,]  64.17164  51.24451  35.34119  26.28688  22.22611   0.00000  55.26301 #> [28,] 118.21167 104.47009  89.11229  78.51751  69.51259  55.26301   0.00000 #> [29,] 147.13939 133.91789 115.91807 103.35860  98.78259  82.99398  32.46537 #> [30,] 232.03664 218.08485 202.67708 191.52023 182.32115 169.38418 114.16217 #>           [,29]     [,30] #>  [1,] 380.27359 467.18198 #>  [2,] 380.34852 467.09528 #>  [3,] 341.09529 427.58508 #>  [4,] 284.27803 370.01757 #>  [5,] 272.48670 359.87498 #>  [6,] 253.79913 340.01912 #>  [7,] 220.76685 307.11073 #>  [8,] 217.09215 305.06721 #>  [9,] 214.31752 302.10429 #> [10,] 213.73582 300.08665 #> [11,] 211.97170 297.05723 #> [12,] 204.19109 289.13838 #> [13,] 199.04271 286.75599 #> [14,] 194.27300 281.71084 #> [15,] 193.04404 278.26786 #> [16,] 184.23083 271.40744 #> [17,] 182.04944 269.96481 #> [18,] 179.02234 265.32621 #> [19,] 177.58660 264.83580 #> [20,] 173.19931 258.82233 #> [21,] 165.05151 252.88930 #> [22,] 147.13939 232.03664 #> [23,] 133.91789 218.08485 #> [24,] 115.91807 202.67708 #> [25,] 103.35860 191.52023 #> [26,]  98.78259 182.32115 #> [27,]  82.99398 169.38418 #> [28,]  32.46537 114.16217 #> [29,]   0.00000  90.17206 #> [30,]  90.17206   0.00000"},{"path":"https://adamlilith.github.io/omnibus/reference/pmatchSafe.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial matching of strings with error checking — pmatchSafe","title":"Partial matching of strings with error checking — pmatchSafe","text":"function pmatch, can throw error instead NA match found, can forced throw error desired number matches found.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pmatchSafe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial matching of strings with error checking — pmatchSafe","text":"","code":"pmatchSafe(   x,   table,   useFirst = FALSE,   error = TRUE,   ignoreCase = TRUE,   nmax = length(x),   ... )"},{"path":"https://adamlilith.github.io/omnibus/reference/pmatchSafe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial matching of strings with error checking — pmatchSafe","text":"x Character: String match. table Character vector: Values match. useFirst Logical: TRUE, one match given x, first value table matches x returned (without error warning). error Logical: match found, return error? ignoreCase Logical: TRUE (default), ignore case values x table checking matches. nmax Positive numeric integer: Maximum allowable number matches. number matches found, error thrown (regardless value error). ... Arguments pass pmatch.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pmatchSafe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial matching of strings with error checking — pmatchSafe","text":"One values table.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/pmatchSafe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial matching of strings with error checking — pmatchSafe","text":"","code":"pmatchSafe('ap', c('apples', 'oranges', 'bananas')) #> [1] \"apples\"  pmatchSafe('AP', c('apples', 'oranges', 'bananas')) #> [1] \"apples\"  pmatchSafe('AP', c('apples', 'oranges', 'bananas'),     ignoreCase = FALSE, error = FALSE) #> [1] NA  pmatchSafe(c('ba', 'ap'), c('apples', 'oranges', 'bananas')) #> [1] \"bananas\" \"apples\"   # No match: tryCatch(     pmatchSafe('kumquats', c('apples', 'oranges', 'bananas')),   error = function(cond) FALSE ) #> [1] FALSE  pmatchSafe('kumquats', c('apples', 'oranges', 'bananas'), error = FALSE) #> [1] NA  pmatchSafe(c('ap', 'corn'), c('apples', 'oranges', 'bananas'), error = FALSE) #> [1] \"apples\" NA        # Too many matches: tryCatch(     pmatchSafe(c('ap', 'ba'), c('apples', 'oranges', 'bananas'), nmax = 1),   error=function(cond) FALSE ) #> [1] FALSE"},{"path":"https://adamlilith.github.io/omnibus/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading characters to a string — prefix","title":"Add leading characters to a string — prefix","text":"Add leading characters string. function useful ensuring, say, files get sorted particular order. example, operating systems file name \"file 1\" come first, \"file 10\", \"file 11\", \"file 12\", etc., \"file 2\", \"file 21\", . Using prefix, can add one leading zeros file names \"file 01\", \"file 02\", \"file 03\", ... sort way.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading characters to a string — prefix","text":"","code":"prefix(x, len, pad = \"0\")"},{"path":"https://adamlilith.github.io/omnibus/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading characters to a string — prefix","text":"x Character character vector add prefix. len total number characters desired string. string already length longer nothing prefixed string. pad Character. Symbol prefix string.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading characters to a string — prefix","text":"Character character vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading characters to a string — prefix","text":"","code":"prefix(1:5, len=2) #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" prefix(1:5, len=5) #> [1] \"00001\" \"00002\" \"00003\" \"00004\" \"00005\" prefix(1:5, len=3, pad='!') #> [1] \"!!1\" \"!!2\" \"!!3\" \"!!4\" \"!!5\""},{"path":"https://adamlilith.github.io/omnibus/reference/quadArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Area of a quadrilateral — quadArea","title":"Area of a quadrilateral — quadArea","text":"Calculates area quadrilateral dividing two triangles applying Heron's formula.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/quadArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area of a quadrilateral — quadArea","text":"","code":"quadArea(x, y)"},{"path":"https://adamlilith.github.io/omnibus/reference/quadArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area of a quadrilateral — quadArea","text":"x Numeric vector. x coordinates quadrilateral. y Numeric vector. y coordinates quadrilateral.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/quadArea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area of a quadrilateral — quadArea","text":"Numeric (area quadrilateral units x y.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/quadArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area of a quadrilateral — quadArea","text":"","code":"x <- c(0, 6, 4, 1) y <- c(0, 1, 7, 4) quadArea(x, y) #> [1] 21.24036 plot(1, type='n', xlim=c(0, 7), ylim=c(0, 7), xlab='x', ylab='y') polygon(x, y) text(x, y, LETTERS[1:4], pos=4) lines(x[c(1, 3)], y[c(1, 3)], lty='dashed', col='red')"},{"path":"https://adamlilith.github.io/omnibus/reference/renameCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — renameCol","title":"Rename columns — renameCol","text":"Rename columns data.frame matrix.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/renameCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — renameCol","text":"","code":"renameCol(x, old, new)"},{"path":"https://adamlilith.github.io/omnibus/reference/renameCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — renameCol","text":"x data.frame matrix. old Character vector names(s), numeric vector indices column(s) want rename. new Character vector new names.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/renameCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns — renameCol","text":"data.frame matrix.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/renameCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — renameCol","text":"","code":"x <- data.frame(old_x = 1:5, old_y = letters[1:5], old_z = LETTERS[1:5]) x #>   old_x old_y old_z #> 1     1     a     A #> 2     2     b     B #> 3     3     c     C #> 4     4     d     D #> 5     5     e     E renameCol(x, c('old_y', 'old_z'), c('new_Y', 'new_Z')) #>   old_x new_Y new_Z #> 1     1     a     A #> 2     2     b     B #> 3     3     c     C #> 4     4     d     D #> 5     5     e     E renameCol(x, c(2, 3), c('new_Y', 'new_Z')) # same as above #>   old_x new_Y new_Z #> 1     1     a     A #> 2     2     b     B #> 3     3     c     C #> 4     4     d     D #> 5     5     e     E  # Long way: new <- c('new_Y', 'new_Z') colnames(x)[match(c('old_y', 'old_z'), colnames(x))] <- new"},{"path":"https://adamlilith.github.io/omnibus/reference/renumSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Renumber a sequence of numbers — renumSeq","title":"Renumber a sequence of numbers — renumSeq","text":"function renumbers sequence, helpful \"gaps\" appear sequence. example, consider sequence {1, 1, 3, 1, 8, 8, 8}. function renumber sequence {1, 1, 2, 1, 3, 3, 3}. NAs ignored.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/renumSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"renumSeq(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/renumSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renumber a sequence of numbers — renumSeq","text":"x Numerical character vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/renumSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renumber a sequence of numbers — renumSeq","text":"vector.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/renumSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Renumber a sequence of numbers — renumSeq","text":"","code":"x <- c(1, 1, 3, 1, 8, 8, 8) renumSeq(x) #> [1] 1 1 2 1 3 3 3  y <- c(1, 1, 3, 1, 8, NA, 8, 8) renumSeq(y) #> [1] 1 1 2 1 3 3 3  z <- c('c', 'c', 'b', 'a', 'w', 'a') renumSeq(z) #> [1] 3 3 2 1 4 1"},{"path":"https://adamlilith.github.io/omnibus/reference/rotateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate values in a matrix — rotateMatrix","title":"Rotate values in a matrix — rotateMatrix","text":"function rotates values matrix user-specified number degrees. almost cases values fall outside matrix discarded.  Cells rotated values become NA. square matrices can accommodated. cases rotation cause cells assigned value original values fall within . instances mean value surrounding cells assigned cells missing values. angle rotation small rotation occur.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rotateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"rotateMatrix(x, rot)"},{"path":"https://adamlilith.github.io/omnibus/reference/rotateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate values in a matrix — rotateMatrix","text":"x matrix. rot Numeric. Number degrees rotate matrix. Values represent difference degrees \"north\" () clockwise direction.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rotateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate values in a matrix — rotateMatrix","text":"matrix.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/rotateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate values in a matrix — rotateMatrix","text":"","code":"x <- matrix(1:100, nrow=10) x #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100 rotateMatrix(x, 90) # 90 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   10    9    8    7    6    5    4    3    2     1 #>  [2,]   20   19   18   17   16   15   14   13   12    11 #>  [3,]   30   29   28   27   26   25   24   23   22    21 #>  [4,]   40   39   38   37   36   35   34   33   32    31 #>  [5,]   50   49   48   47   46   45   44   43   42    41 #>  [6,]   60   59   58   57   56   55   54   53   52    51 #>  [7,]   70   69   68   67   66   65   64   63   62    61 #>  [8,]   80   79   78   77   76   75   74   73   72    71 #>  [9,]   90   89   88   87   86   85   84   83   82    81 #> [10,]  100   99   98   97   96   95   94   93   92    91 rotateMatrix(x, 180) # 180 degrees to the right #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   90   80   70   60   50   40   30   20    10 #>  [2,]   99   89   79   69   59   49   39   29   19     9 #>  [3,]   98   88   78   68   58   48   38   28   18     8 #>  [4,]   97   87   77   67   57   47   37   27   17     7 #>  [5,]   96   86   76   66   56   46   36   26   16     6 #>  [6,]   95   85   75   65   55   45   35   25   15     5 #>  [7,]   94   84   74   64   54   44   34   24   14     4 #>  [8,]   93   83   73   63   53   43   33   23   13     3 #>  [9,]   92   82   72   62   52   42   32   22   12     2 #> [10,]   91   81   71   61   51   41   31   21   11     1 rotateMatrix(x, 45) # 45 degrees to the right #>       [,1] [,2] [,3]   [,4]     [,5]   [,6]   [,7] [,8]   [,9] [,10] #>  [1,]   NA   NA    4  3.000 13.00000 22.000 21.000   31     NA    NA #>  [2,]   NA  7.6    5 14.000 19.75000 23.000 32.000   41 47.200    NA #>  [3,]    7  6.0   16 25.000 24.00000 34.000 43.000   52 51.000    61 #>  [4,]    8 17.0   26 27.000 35.00000 44.000 48.500   53 62.000    71 #>  [5,]   19 24.0   27 36.000 44.14286 45.000 54.000   63 68.875    72 #>  [6,]   29 28.0   38 47.000 46.00000 56.000 65.000   74 73.000    83 #>  [7,]   30 39.0   48 52.625 57.00000 66.000 71.875   75 84.000    93 #>  [8,]   40 50.0   59 58.000 68.00000 77.000 76.000   86 95.000    94 #>  [9,]   NA 55.8   60 69.000 78.00000 82.625 87.000   96 93.600    NA #> [10,]   NA   NA   70 80.000 89.00000 88.000 98.000   97     NA    NA rotateMatrix(x, 7) # slight rotation #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   NA   11   21   31   41   51   61   71    81 #>  [2,]    3   12   22   32   42   52   62   72   82    NA #>  [3,]    4   13   23   33   43   53   63   73   83    92 #>  [4,]    5   14   24   34   44   54   64   74   84    93 #>  [5,]    6   15   25   35   45   55   65   75   85    94 #>  [6,]    7   16   26   36   46   56   66   76   86    95 #>  [7,]    8   17   27   37   47   57   67   77   87    96 #>  [8,]    9   18   28   38   48   58   68   78   88    97 #>  [9,]   NA   19   29   39   49   59   69   79   89    98 #> [10,]   20   30   40   50   60   70   80   90   NA    99 rotateMatrix(x, 5) # no rotation because angle is too small #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"https://adamlilith.github.io/omnibus/reference/roundTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to nearest target value — roundTo","title":"Round to nearest target value — roundTo","text":"function rounds value nearest \"target\" value (e.g., round 0.72 nearest 0.25, 0.75).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(x, target, roundFx = round)"},{"path":"https://adamlilith.github.io/omnibus/reference/roundTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to nearest target value — roundTo","text":"x Numeric. target Numeric. roundFx round, floor, ceiling.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to nearest target value — roundTo","text":"Numeric.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundTo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to nearest target value — roundTo","text":"","code":"roundTo(0.73, 0.05) #> [1] 0.75 roundTo(0.73, 0.1) #> [1] 0.7 roundTo(0.73, 0.25) #> [1] 0.75 roundTo(0.73, 0.25, floor) #> [1] 0.5 roundTo(0.73, 1) #> [1] 1 roundTo(0.73, 10) #> [1] 0 roundTo(0.73, 10, ceiling) #> [1] 10"},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of significant digits in rounded numbers — roundedSigDigits","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"function examines numeric value (typically numbers decimal place) estimates either: number significant digits numerator denominator fraction (approximately) result given value. number digits integer may rounded, depending whether input values decimal place integer. Negative values treated positive negative number returns value positive version. See Details details. Obviously, values can appear rounded repeating even !","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(x, minReps = 3)"},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"x Numeric numeric vector. minReps Integer. Number times digit sequence digits occur decimal place needs repeated assume represents repeating series thus assumed arise using decimal places represent fraction. Default 3. example, minReps 3 0.111 assumed represent repeating value 1 occurs three times, -1 returned since decimal can represented 1/9 (.e., division 1 single-digit number). However, minReps 4 function assume value four digits, next digit 1, returns -3 three significant values decimal place. penultimate digit >5 last digit equal penultimate digit plus 1, last digit counts repeat penultimate digit.  0.067 assumed two repeating 6s.  minReps 0 1 function (usually) return negative total number decimal places value.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"Integer (number digits) NA (appear rounded).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"values least one non-zero digit decimal place repeated series digits detected, function simply returns total number digits (ignoring trailing zeros) times -1. example: 0.3 returns -1 just one value decimal. 0.34567 returns -5 repeats 5th decimal place. 0.1212125 returns -7 repeats (starting right) 7th decimal place. 0.111117 returns -6 repeats (starting right) 7th decimal place. function takes account rounding : 0.666 might truncated version 2/3. Two three 1 significant digit, function returns -1 (1 value decimal place). 0.667 also returns -1 might represent rounding 2/3 customary round digits next digit >5. 0.3334 returns -4 inappropriate round 3 4 next digit 5 less. Repeating series accounted . example: 0.121212 returns -2 \"12\" starts repeating second decimal place. 0.000678678678 returns -6 \"678\" starts repeating 6th place. 0.678678678 returns -3. 0.678678679 also returns -3 678 rounded 679 next digit 6. Note can set minimum number times digit series needs repeated count repeated using argument minReps. default 3, digits series digits need repeated least 3 times count repetition, can changed: 0.1111 returns -1 using default requirement 3 repetitions -4 number minimum repetitions 5 . 0.121212 returns -2 using default requirement 3 repetitions -6 number minimum repetitions 4 . Trailing zeros ignored, 0.12300 returns -3. values digits decimal place location first non-zero digit right returned positive integer. example: 234 returns 1 first non-zero digit right 1s place. 100 return 3 first non-zero digit right 100s place. 70001 returns 1 first non-zero digit right 1s place. However, note oddities: 4E5 returns 6 4E50 probably return 51 many computers hard time internally representing numbers large. 4E-5 returns -5  probably return -50 many computers hard time internally representing numbers small. -100 100 return 3 -0.12 0.12 return -2 negative sign ignored. 0 returns 0. NA NaN returns NA.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/roundedSigDigits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of significant digits in rounded numbers — roundedSigDigits","text":"","code":"roundedSigDigits(0.3) #> [1] -1 roundedSigDigits(0.34567) #> [1] -5 roundedSigDigits(0.1212125) #> [1] -7 roundedSigDigits(0.111117) #> [1] -6 roundedSigDigits(0.666) #> [1] -1 roundedSigDigits(0.667) #> [1] -1 roundedSigDigits(0.3334) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.000678678678) #> [1] -6 roundedSigDigits(0.678678678) #> [1] -3 roundedSigDigits(0.678678679) #> [1] -3 roundedSigDigits(0.1111) #> [1] -1 roundedSigDigits(0.1111, minReps=5) #> [1] -4 roundedSigDigits(0.121212) #> [1] -2 roundedSigDigits(0.121212, minReps=4) #> [1] -6 roundedSigDigits(234) #> [1] 1 roundedSigDigits(100) #> [1] 3 roundedSigDigits(70001) #> [1] 1 roundedSigDigits(4E5) #> [1] 6 roundedSigDigits(4E50) #> [1] 2 roundedSigDigits(4E-5) #> [1] -5 roundedSigDigits(4E-50) #> [1] -50 roundedSigDigits(0) #> [1] 0 roundedSigDigits(NA) #> [1] NA  x <- c(0.0667, 0.0667, 0.067) roundedSigDigits(x) #> [1] -2 -2 -3"},{"path":"https://adamlilith.github.io/omnibus/reference/rowColIndexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between row- and column-style indexing of matrices — rowColIndexing","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"functions converts index values cells row- column-style indexing cells matrices. Column indexing (default matrices) cell \"1\" upper left corner matrix. cell \"2\" , . numbering wraps around top next column. Row indexing (default rasters, example), also cell \"1\" upper left, cell \"2\" right, . Numbering wraps around next row.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rowColIndexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"rowColIndexing(x, cell, dir)"},{"path":"https://adamlilith.github.io/omnibus/reference/rowColIndexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"x Either matrix, vector two values, one number rows one number columns matrix. cell One cell indices (positive integers). dir \"direction\" convert. 'row', assumed cell column-style index converted row-style index. 'col', assumed cell row-style index converted column-style index.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rowColIndexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"One positive integers.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rowColIndexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between row- and column-style indexing of matrices — rowColIndexing","text":"","code":"# column versus row indexing colIndex <- matrix(1:40, nrow=5, ncol=8) rowIndex <- matrix(1:40, nrow=5, ncol=8, byrow=TRUE) colIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    6   11   16   21   26   31   36 #> [2,]    2    7   12   17   22   27   32   37 #> [3,]    3    8   13   18   23   28   33   38 #> [4,]    4    9   14   19   24   29   34   39 #> [5,]    5   10   15   20   25   30   35   40 rowIndex #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40  # examples x <- matrix('a', nrow=5, ncol=8, byrow=TRUE) rowColIndexing(x, cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(x, cell=c(1, 6, 20), 'col') #> [1]  1 26 18  rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'row') #> [1]  1  2 36 rowColIndexing(c(5, 8), cell=c(1, 6, 20), 'col') #> [1]  1 26 18"},{"path":"https://adamlilith.github.io/omnibus/reference/rstring.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a nearly-guaranteed unique string — rstring","title":"Make a nearly-guaranteed unique string — rstring","text":"rstring() makes string statically extremely likely unique (using default options).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rstring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a nearly-guaranteed unique string — rstring","text":"","code":"rstring(n, x = 12, filesafe = TRUE)"},{"path":"https://adamlilith.github.io/omnibus/reference/rstring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a nearly-guaranteed unique string — rstring","text":"n Numeric integer: many strings make (default 1). x Numeric integer: Number letters digits use make string. Default 12, leading probability two matching random strings <3.7E-18 filesafe = TRUE <3.1E-22 FALSE. filesafe Logical: TRUE (default), make file-safe names (leading character letter).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rstring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a nearly-guaranteed unique string — rstring","text":"Character.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/rstring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a nearly-guaranteed unique string — rstring","text":"","code":"rstring(1) #> [1] \"Rds3Z4qwECZ3\" rstring(5) #> [1] \"jisyYUCWowK4\" \"xZE6kU1N7gYB\" \"iNlcphl3bgrz\" \"y7G0zbi4QGpw\" \"j7oQFtAa74y8\" rstring(5, 3) #> [1] \"j7X\" \"Q59\" \"EH5\" \"ZPX\" \"UKs\""},{"path":"https://adamlilith.github.io/omnibus/reference/say.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer version of print() or cat() function — say","title":"Nicer version of print() or cat() function — say","text":"function nicer version print() cat(), especially used inline functions displays immediately pastes strings together. also rudimentary optional word wrapping.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/say.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer version of print() or cat() function — say","text":"","code":"say(   ...,   pre = 0,   post = 1,   breaks = NULL,   wiggle = 10,   preBreak = 1,   level = NULL,   deco = \"#\" )"},{"path":"https://adamlilith.github.io/omnibus/reference/say.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nicer version of print() or cat() function — say","text":"... Character strings print pre Integer >= 0.  Number blank lines print strings post Integer >= 0. Number blank lines print strings breaks Either NULL, causes strings printed line (wrap overflow) positive integer wraps lines character length (e.g., breaks=80 inserts line breaks every 80 characters). wiggle Integer >- 0.  Allows line overrun breaks length characters inserting line breaks. preBreak wrapping long lines indicates subsequent lines indented. NULL causes lines printed starting column 1 display device. positive integer inserts preBreak number spaces printing line. string causes line start string. level Integer NULL. NULL, items ... displayed -. Otherwise, value 1, 2, 3 indicates teh heading level, lower numbers causing decoration spacing used. deco Character. Character decorate text level NULL.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/say.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nicer version of print() or cat() function — say","text":"Nothing (side effect output display device).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/say.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nicer version of print() or cat() function — say","text":"","code":"say('The quick brown fox ', 'jumps over the lazy ', 'Susan.') #>  The quick brown fox jumps over the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', breaks=10) #>  The quick  #>  brown fox  #>  jumps over #>   the lazy Susan. say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=1) #>  #>  ######################################################  #>  ### The quick brown fox jumps over the lazy Susan. ### #>  ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=2) #>  #>     ### The quick brown fox jumps over the lazy Susan. ### #>     ######################################################  #>  say('The quick brown fox ', 'jumps over the lazy ', 'Susan.', level=3) #>  #>        ### The quick brown fox jumps over the lazy Susan.  #>"},{"path":"https://adamlilith.github.io/omnibus/reference/side.html","id":null,"dir":"Reference","previous_headings":"","what":"Left/right side of a data frame or matrix — side","title":"Left/right side of a data frame or matrix — side","text":"function extracts leftmost rightmost set columns data frame matrix.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/side.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left/right side of a data frame or matrix — side","text":"","code":"side(x, side = 1, n = 3)"},{"path":"https://adamlilith.github.io/omnibus/reference/side.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left/right side of a data frame or matrix — side","text":"x data.frame matrix. side Either 1 (left side) 2 (right side), 'left' 'right'. Case ignored partial matching used. n Number columns. default 3.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/side.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left/right side of a data frame or matrix — side","text":"data.frame matrix.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/side.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left/right side of a data frame or matrix — side","text":"","code":"side(iris) #>     Sepal.Length Sepal.Width Petal.Length #> 1            5.1         3.5          1.4 #> 2            4.9         3.0          1.4 #> 3            4.7         3.2          1.3 #> 4            4.6         3.1          1.5 #> 5            5.0         3.6          1.4 #> 6            5.4         3.9          1.7 #> 7            4.6         3.4          1.4 #> 8            5.0         3.4          1.5 #> 9            4.4         2.9          1.4 #> 10           4.9         3.1          1.5 #> 11           5.4         3.7          1.5 #> 12           4.8         3.4          1.6 #> 13           4.8         3.0          1.4 #> 14           4.3         3.0          1.1 #> 15           5.8         4.0          1.2 #> 16           5.7         4.4          1.5 #> 17           5.4         3.9          1.3 #> 18           5.1         3.5          1.4 #> 19           5.7         3.8          1.7 #> 20           5.1         3.8          1.5 #> 21           5.4         3.4          1.7 #> 22           5.1         3.7          1.5 #> 23           4.6         3.6          1.0 #> 24           5.1         3.3          1.7 #> 25           4.8         3.4          1.9 #> 26           5.0         3.0          1.6 #> 27           5.0         3.4          1.6 #> 28           5.2         3.5          1.5 #> 29           5.2         3.4          1.4 #> 30           4.7         3.2          1.6 #> 31           4.8         3.1          1.6 #> 32           5.4         3.4          1.5 #> 33           5.2         4.1          1.5 #> 34           5.5         4.2          1.4 #> 35           4.9         3.1          1.5 #> 36           5.0         3.2          1.2 #> 37           5.5         3.5          1.3 #> 38           4.9         3.6          1.4 #> 39           4.4         3.0          1.3 #> 40           5.1         3.4          1.5 #> 41           5.0         3.5          1.3 #> 42           4.5         2.3          1.3 #> 43           4.4         3.2          1.3 #> 44           5.0         3.5          1.6 #> 45           5.1         3.8          1.9 #> 46           4.8         3.0          1.4 #> 47           5.1         3.8          1.6 #> 48           4.6         3.2          1.4 #> 49           5.3         3.7          1.5 #> 50           5.0         3.3          1.4 #> 51           7.0         3.2          4.7 #> 52           6.4         3.2          4.5 #> 53           6.9         3.1          4.9 #> 54           5.5         2.3          4.0 #> 55           6.5         2.8          4.6 #> 56           5.7         2.8          4.5 #> 57           6.3         3.3          4.7 #> 58           4.9         2.4          3.3 #> 59           6.6         2.9          4.6 #> 60           5.2         2.7          3.9 #> 61           5.0         2.0          3.5 #> 62           5.9         3.0          4.2 #> 63           6.0         2.2          4.0 #> 64           6.1         2.9          4.7 #> 65           5.6         2.9          3.6 #> 66           6.7         3.1          4.4 #> 67           5.6         3.0          4.5 #> 68           5.8         2.7          4.1 #> 69           6.2         2.2          4.5 #> 70           5.6         2.5          3.9 #> 71           5.9         3.2          4.8 #> 72           6.1         2.8          4.0 #> 73           6.3         2.5          4.9 #> 74           6.1         2.8          4.7 #> 75           6.4         2.9          4.3 #> 76           6.6         3.0          4.4 #> 77           6.8         2.8          4.8 #> 78           6.7         3.0          5.0 #> 79           6.0         2.9          4.5 #> 80           5.7         2.6          3.5 #> 81           5.5         2.4          3.8 #> 82           5.5         2.4          3.7 #> 83           5.8         2.7          3.9 #> 84           6.0         2.7          5.1 #> 85           5.4         3.0          4.5 #> 86           6.0         3.4          4.5 #> 87           6.7         3.1          4.7 #> 88           6.3         2.3          4.4 #> 89           5.6         3.0          4.1 #> 90           5.5         2.5          4.0 #> 91           5.5         2.6          4.4 #> 92           6.1         3.0          4.6 #> 93           5.8         2.6          4.0 #> 94           5.0         2.3          3.3 #> 95           5.6         2.7          4.2 #> 96           5.7         3.0          4.2 #> 97           5.7         2.9          4.2 #> 98           6.2         2.9          4.3 #> 99           5.1         2.5          3.0 #> 100          5.7         2.8          4.1 #> 101          6.3         3.3          6.0 #> 102          5.8         2.7          5.1 #> 103          7.1         3.0          5.9 #> 104          6.3         2.9          5.6 #> 105          6.5         3.0          5.8 #> 106          7.6         3.0          6.6 #> 107          4.9         2.5          4.5 #> 108          7.3         2.9          6.3 #> 109          6.7         2.5          5.8 #> 110          7.2         3.6          6.1 #> 111          6.5         3.2          5.1 #> 112          6.4         2.7          5.3 #> 113          6.8         3.0          5.5 #> 114          5.7         2.5          5.0 #> 115          5.8         2.8          5.1 #> 116          6.4         3.2          5.3 #> 117          6.5         3.0          5.5 #> 118          7.7         3.8          6.7 #> 119          7.7         2.6          6.9 #> 120          6.0         2.2          5.0 #> 121          6.9         3.2          5.7 #> 122          5.6         2.8          4.9 #> 123          7.7         2.8          6.7 #> 124          6.3         2.7          4.9 #> 125          6.7         3.3          5.7 #> 126          7.2         3.2          6.0 #> 127          6.2         2.8          4.8 #> 128          6.1         3.0          4.9 #> 129          6.4         2.8          5.6 #> 130          7.2         3.0          5.8 #> 131          7.4         2.8          6.1 #> 132          7.9         3.8          6.4 #> 133          6.4         2.8          5.6 #> 134          6.3         2.8          5.1 #> 135          6.1         2.6          5.6 #> 136          7.7         3.0          6.1 #> 137          6.3         3.4          5.6 #> 138          6.4         3.1          5.5 #> 139          6.0         3.0          4.8 #> 140          6.9         3.1          5.4 #> 141          6.7         3.1          5.6 #> 142          6.9         3.1          5.1 #> 143          5.8         2.7          5.1 #> 144          6.8         3.2          5.9 #> 145          6.7         3.3          5.7 #> 146          6.7         3.0          5.2 #> 147          6.3         2.5          5.0 #> 148          6.5         3.0          5.2 #> 149          6.2         3.4          5.4 #> 150          5.9         3.0          5.1 side(iris, 2) #>     Petal.Length Petal.Width    Species #> 1            1.4         0.2     setosa #> 2            1.4         0.2     setosa #> 3            1.3         0.2     setosa #> 4            1.5         0.2     setosa #> 5            1.4         0.2     setosa #> 6            1.7         0.4     setosa #> 7            1.4         0.3     setosa #> 8            1.5         0.2     setosa #> 9            1.4         0.2     setosa #> 10           1.5         0.1     setosa #> 11           1.5         0.2     setosa #> 12           1.6         0.2     setosa #> 13           1.4         0.1     setosa #> 14           1.1         0.1     setosa #> 15           1.2         0.2     setosa #> 16           1.5         0.4     setosa #> 17           1.3         0.4     setosa #> 18           1.4         0.3     setosa #> 19           1.7         0.3     setosa #> 20           1.5         0.3     setosa #> 21           1.7         0.2     setosa #> 22           1.5         0.4     setosa #> 23           1.0         0.2     setosa #> 24           1.7         0.5     setosa #> 25           1.9         0.2     setosa #> 26           1.6         0.2     setosa #> 27           1.6         0.4     setosa #> 28           1.5         0.2     setosa #> 29           1.4         0.2     setosa #> 30           1.6         0.2     setosa #> 31           1.6         0.2     setosa #> 32           1.5         0.4     setosa #> 33           1.5         0.1     setosa #> 34           1.4         0.2     setosa #> 35           1.5         0.2     setosa #> 36           1.2         0.2     setosa #> 37           1.3         0.2     setosa #> 38           1.4         0.1     setosa #> 39           1.3         0.2     setosa #> 40           1.5         0.2     setosa #> 41           1.3         0.3     setosa #> 42           1.3         0.3     setosa #> 43           1.3         0.2     setosa #> 44           1.6         0.6     setosa #> 45           1.9         0.4     setosa #> 46           1.4         0.3     setosa #> 47           1.6         0.2     setosa #> 48           1.4         0.2     setosa #> 49           1.5         0.2     setosa #> 50           1.4         0.2     setosa #> 51           4.7         1.4 versicolor #> 52           4.5         1.5 versicolor #> 53           4.9         1.5 versicolor #> 54           4.0         1.3 versicolor #> 55           4.6         1.5 versicolor #> 56           4.5         1.3 versicolor #> 57           4.7         1.6 versicolor #> 58           3.3         1.0 versicolor #> 59           4.6         1.3 versicolor #> 60           3.9         1.4 versicolor #> 61           3.5         1.0 versicolor #> 62           4.2         1.5 versicolor #> 63           4.0         1.0 versicolor #> 64           4.7         1.4 versicolor #> 65           3.6         1.3 versicolor #> 66           4.4         1.4 versicolor #> 67           4.5         1.5 versicolor #> 68           4.1         1.0 versicolor #> 69           4.5         1.5 versicolor #> 70           3.9         1.1 versicolor #> 71           4.8         1.8 versicolor #> 72           4.0         1.3 versicolor #> 73           4.9         1.5 versicolor #> 74           4.7         1.2 versicolor #> 75           4.3         1.3 versicolor #> 76           4.4         1.4 versicolor #> 77           4.8         1.4 versicolor #> 78           5.0         1.7 versicolor #> 79           4.5         1.5 versicolor #> 80           3.5         1.0 versicolor #> 81           3.8         1.1 versicolor #> 82           3.7         1.0 versicolor #> 83           3.9         1.2 versicolor #> 84           5.1         1.6 versicolor #> 85           4.5         1.5 versicolor #> 86           4.5         1.6 versicolor #> 87           4.7         1.5 versicolor #> 88           4.4         1.3 versicolor #> 89           4.1         1.3 versicolor #> 90           4.0         1.3 versicolor #> 91           4.4         1.2 versicolor #> 92           4.6         1.4 versicolor #> 93           4.0         1.2 versicolor #> 94           3.3         1.0 versicolor #> 95           4.2         1.3 versicolor #> 96           4.2         1.2 versicolor #> 97           4.2         1.3 versicolor #> 98           4.3         1.3 versicolor #> 99           3.0         1.1 versicolor #> 100          4.1         1.3 versicolor #> 101          6.0         2.5  virginica #> 102          5.1         1.9  virginica #> 103          5.9         2.1  virginica #> 104          5.6         1.8  virginica #> 105          5.8         2.2  virginica #> 106          6.6         2.1  virginica #> 107          4.5         1.7  virginica #> 108          6.3         1.8  virginica #> 109          5.8         1.8  virginica #> 110          6.1         2.5  virginica #> 111          5.1         2.0  virginica #> 112          5.3         1.9  virginica #> 113          5.5         2.1  virginica #> 114          5.0         2.0  virginica #> 115          5.1         2.4  virginica #> 116          5.3         2.3  virginica #> 117          5.5         1.8  virginica #> 118          6.7         2.2  virginica #> 119          6.9         2.3  virginica #> 120          5.0         1.5  virginica #> 121          5.7         2.3  virginica #> 122          4.9         2.0  virginica #> 123          6.7         2.0  virginica #> 124          4.9         1.8  virginica #> 125          5.7         2.1  virginica #> 126          6.0         1.8  virginica #> 127          4.8         1.8  virginica #> 128          4.9         1.8  virginica #> 129          5.6         2.1  virginica #> 130          5.8         1.6  virginica #> 131          6.1         1.9  virginica #> 132          6.4         2.0  virginica #> 133          5.6         2.2  virginica #> 134          5.1         1.5  virginica #> 135          5.6         1.4  virginica #> 136          6.1         2.3  virginica #> 137          5.6         2.4  virginica #> 138          5.5         1.8  virginica #> 139          4.8         1.8  virginica #> 140          5.4         2.1  virginica #> 141          5.6         2.4  virginica #> 142          5.1         2.3  virginica #> 143          5.1         1.9  virginica #> 144          5.9         2.3  virginica #> 145          5.7         2.5  virginica #> 146          5.2         2.3  virginica #> 147          5.0         1.9  virginica #> 148          5.2         2.0  virginica #> 149          5.4         2.3  virginica #> 150          5.1         1.8  virginica side(iris, 'l') #>     Sepal.Length Sepal.Width Petal.Length #> 1            5.1         3.5          1.4 #> 2            4.9         3.0          1.4 #> 3            4.7         3.2          1.3 #> 4            4.6         3.1          1.5 #> 5            5.0         3.6          1.4 #> 6            5.4         3.9          1.7 #> 7            4.6         3.4          1.4 #> 8            5.0         3.4          1.5 #> 9            4.4         2.9          1.4 #> 10           4.9         3.1          1.5 #> 11           5.4         3.7          1.5 #> 12           4.8         3.4          1.6 #> 13           4.8         3.0          1.4 #> 14           4.3         3.0          1.1 #> 15           5.8         4.0          1.2 #> 16           5.7         4.4          1.5 #> 17           5.4         3.9          1.3 #> 18           5.1         3.5          1.4 #> 19           5.7         3.8          1.7 #> 20           5.1         3.8          1.5 #> 21           5.4         3.4          1.7 #> 22           5.1         3.7          1.5 #> 23           4.6         3.6          1.0 #> 24           5.1         3.3          1.7 #> 25           4.8         3.4          1.9 #> 26           5.0         3.0          1.6 #> 27           5.0         3.4          1.6 #> 28           5.2         3.5          1.5 #> 29           5.2         3.4          1.4 #> 30           4.7         3.2          1.6 #> 31           4.8         3.1          1.6 #> 32           5.4         3.4          1.5 #> 33           5.2         4.1          1.5 #> 34           5.5         4.2          1.4 #> 35           4.9         3.1          1.5 #> 36           5.0         3.2          1.2 #> 37           5.5         3.5          1.3 #> 38           4.9         3.6          1.4 #> 39           4.4         3.0          1.3 #> 40           5.1         3.4          1.5 #> 41           5.0         3.5          1.3 #> 42           4.5         2.3          1.3 #> 43           4.4         3.2          1.3 #> 44           5.0         3.5          1.6 #> 45           5.1         3.8          1.9 #> 46           4.8         3.0          1.4 #> 47           5.1         3.8          1.6 #> 48           4.6         3.2          1.4 #> 49           5.3         3.7          1.5 #> 50           5.0         3.3          1.4 #> 51           7.0         3.2          4.7 #> 52           6.4         3.2          4.5 #> 53           6.9         3.1          4.9 #> 54           5.5         2.3          4.0 #> 55           6.5         2.8          4.6 #> 56           5.7         2.8          4.5 #> 57           6.3         3.3          4.7 #> 58           4.9         2.4          3.3 #> 59           6.6         2.9          4.6 #> 60           5.2         2.7          3.9 #> 61           5.0         2.0          3.5 #> 62           5.9         3.0          4.2 #> 63           6.0         2.2          4.0 #> 64           6.1         2.9          4.7 #> 65           5.6         2.9          3.6 #> 66           6.7         3.1          4.4 #> 67           5.6         3.0          4.5 #> 68           5.8         2.7          4.1 #> 69           6.2         2.2          4.5 #> 70           5.6         2.5          3.9 #> 71           5.9         3.2          4.8 #> 72           6.1         2.8          4.0 #> 73           6.3         2.5          4.9 #> 74           6.1         2.8          4.7 #> 75           6.4         2.9          4.3 #> 76           6.6         3.0          4.4 #> 77           6.8         2.8          4.8 #> 78           6.7         3.0          5.0 #> 79           6.0         2.9          4.5 #> 80           5.7         2.6          3.5 #> 81           5.5         2.4          3.8 #> 82           5.5         2.4          3.7 #> 83           5.8         2.7          3.9 #> 84           6.0         2.7          5.1 #> 85           5.4         3.0          4.5 #> 86           6.0         3.4          4.5 #> 87           6.7         3.1          4.7 #> 88           6.3         2.3          4.4 #> 89           5.6         3.0          4.1 #> 90           5.5         2.5          4.0 #> 91           5.5         2.6          4.4 #> 92           6.1         3.0          4.6 #> 93           5.8         2.6          4.0 #> 94           5.0         2.3          3.3 #> 95           5.6         2.7          4.2 #> 96           5.7         3.0          4.2 #> 97           5.7         2.9          4.2 #> 98           6.2         2.9          4.3 #> 99           5.1         2.5          3.0 #> 100          5.7         2.8          4.1 #> 101          6.3         3.3          6.0 #> 102          5.8         2.7          5.1 #> 103          7.1         3.0          5.9 #> 104          6.3         2.9          5.6 #> 105          6.5         3.0          5.8 #> 106          7.6         3.0          6.6 #> 107          4.9         2.5          4.5 #> 108          7.3         2.9          6.3 #> 109          6.7         2.5          5.8 #> 110          7.2         3.6          6.1 #> 111          6.5         3.2          5.1 #> 112          6.4         2.7          5.3 #> 113          6.8         3.0          5.5 #> 114          5.7         2.5          5.0 #> 115          5.8         2.8          5.1 #> 116          6.4         3.2          5.3 #> 117          6.5         3.0          5.5 #> 118          7.7         3.8          6.7 #> 119          7.7         2.6          6.9 #> 120          6.0         2.2          5.0 #> 121          6.9         3.2          5.7 #> 122          5.6         2.8          4.9 #> 123          7.7         2.8          6.7 #> 124          6.3         2.7          4.9 #> 125          6.7         3.3          5.7 #> 126          7.2         3.2          6.0 #> 127          6.2         2.8          4.8 #> 128          6.1         3.0          4.9 #> 129          6.4         2.8          5.6 #> 130          7.2         3.0          5.8 #> 131          7.4         2.8          6.1 #> 132          7.9         3.8          6.4 #> 133          6.4         2.8          5.6 #> 134          6.3         2.8          5.1 #> 135          6.1         2.6          5.6 #> 136          7.7         3.0          6.1 #> 137          6.3         3.4          5.6 #> 138          6.4         3.1          5.5 #> 139          6.0         3.0          4.8 #> 140          6.9         3.1          5.4 #> 141          6.7         3.1          5.6 #> 142          6.9         3.1          5.1 #> 143          5.8         2.7          5.1 #> 144          6.8         3.2          5.9 #> 145          6.7         3.3          5.7 #> 146          6.7         3.0          5.2 #> 147          6.3         2.5          5.0 #> 148          6.5         3.0          5.2 #> 149          6.2         3.4          5.4 #> 150          5.9         3.0          5.1 side(iris, 'r') #>     Petal.Length Petal.Width    Species #> 1            1.4         0.2     setosa #> 2            1.4         0.2     setosa #> 3            1.3         0.2     setosa #> 4            1.5         0.2     setosa #> 5            1.4         0.2     setosa #> 6            1.7         0.4     setosa #> 7            1.4         0.3     setosa #> 8            1.5         0.2     setosa #> 9            1.4         0.2     setosa #> 10           1.5         0.1     setosa #> 11           1.5         0.2     setosa #> 12           1.6         0.2     setosa #> 13           1.4         0.1     setosa #> 14           1.1         0.1     setosa #> 15           1.2         0.2     setosa #> 16           1.5         0.4     setosa #> 17           1.3         0.4     setosa #> 18           1.4         0.3     setosa #> 19           1.7         0.3     setosa #> 20           1.5         0.3     setosa #> 21           1.7         0.2     setosa #> 22           1.5         0.4     setosa #> 23           1.0         0.2     setosa #> 24           1.7         0.5     setosa #> 25           1.9         0.2     setosa #> 26           1.6         0.2     setosa #> 27           1.6         0.4     setosa #> 28           1.5         0.2     setosa #> 29           1.4         0.2     setosa #> 30           1.6         0.2     setosa #> 31           1.6         0.2     setosa #> 32           1.5         0.4     setosa #> 33           1.5         0.1     setosa #> 34           1.4         0.2     setosa #> 35           1.5         0.2     setosa #> 36           1.2         0.2     setosa #> 37           1.3         0.2     setosa #> 38           1.4         0.1     setosa #> 39           1.3         0.2     setosa #> 40           1.5         0.2     setosa #> 41           1.3         0.3     setosa #> 42           1.3         0.3     setosa #> 43           1.3         0.2     setosa #> 44           1.6         0.6     setosa #> 45           1.9         0.4     setosa #> 46           1.4         0.3     setosa #> 47           1.6         0.2     setosa #> 48           1.4         0.2     setosa #> 49           1.5         0.2     setosa #> 50           1.4         0.2     setosa #> 51           4.7         1.4 versicolor #> 52           4.5         1.5 versicolor #> 53           4.9         1.5 versicolor #> 54           4.0         1.3 versicolor #> 55           4.6         1.5 versicolor #> 56           4.5         1.3 versicolor #> 57           4.7         1.6 versicolor #> 58           3.3         1.0 versicolor #> 59           4.6         1.3 versicolor #> 60           3.9         1.4 versicolor #> 61           3.5         1.0 versicolor #> 62           4.2         1.5 versicolor #> 63           4.0         1.0 versicolor #> 64           4.7         1.4 versicolor #> 65           3.6         1.3 versicolor #> 66           4.4         1.4 versicolor #> 67           4.5         1.5 versicolor #> 68           4.1         1.0 versicolor #> 69           4.5         1.5 versicolor #> 70           3.9         1.1 versicolor #> 71           4.8         1.8 versicolor #> 72           4.0         1.3 versicolor #> 73           4.9         1.5 versicolor #> 74           4.7         1.2 versicolor #> 75           4.3         1.3 versicolor #> 76           4.4         1.4 versicolor #> 77           4.8         1.4 versicolor #> 78           5.0         1.7 versicolor #> 79           4.5         1.5 versicolor #> 80           3.5         1.0 versicolor #> 81           3.8         1.1 versicolor #> 82           3.7         1.0 versicolor #> 83           3.9         1.2 versicolor #> 84           5.1         1.6 versicolor #> 85           4.5         1.5 versicolor #> 86           4.5         1.6 versicolor #> 87           4.7         1.5 versicolor #> 88           4.4         1.3 versicolor #> 89           4.1         1.3 versicolor #> 90           4.0         1.3 versicolor #> 91           4.4         1.2 versicolor #> 92           4.6         1.4 versicolor #> 93           4.0         1.2 versicolor #> 94           3.3         1.0 versicolor #> 95           4.2         1.3 versicolor #> 96           4.2         1.2 versicolor #> 97           4.2         1.3 versicolor #> 98           4.3         1.3 versicolor #> 99           3.0         1.1 versicolor #> 100          4.1         1.3 versicolor #> 101          6.0         2.5  virginica #> 102          5.1         1.9  virginica #> 103          5.9         2.1  virginica #> 104          5.6         1.8  virginica #> 105          5.8         2.2  virginica #> 106          6.6         2.1  virginica #> 107          4.5         1.7  virginica #> 108          6.3         1.8  virginica #> 109          5.8         1.8  virginica #> 110          6.1         2.5  virginica #> 111          5.1         2.0  virginica #> 112          5.3         1.9  virginica #> 113          5.5         2.1  virginica #> 114          5.0         2.0  virginica #> 115          5.1         2.4  virginica #> 116          5.3         2.3  virginica #> 117          5.5         1.8  virginica #> 118          6.7         2.2  virginica #> 119          6.9         2.3  virginica #> 120          5.0         1.5  virginica #> 121          5.7         2.3  virginica #> 122          4.9         2.0  virginica #> 123          6.7         2.0  virginica #> 124          4.9         1.8  virginica #> 125          5.7         2.1  virginica #> 126          6.0         1.8  virginica #> 127          4.8         1.8  virginica #> 128          4.9         1.8  virginica #> 129          5.6         2.1  virginica #> 130          5.8         1.6  virginica #> 131          6.1         1.9  virginica #> 132          6.4         2.0  virginica #> 133          5.6         2.2  virginica #> 134          5.1         1.5  virginica #> 135          5.6         1.4  virginica #> 136          6.1         2.3  virginica #> 137          5.6         2.4  virginica #> 138          5.5         1.8  virginica #> 139          4.8         1.8  virginica #> 140          5.4         2.1  virginica #> 141          5.6         2.4  virginica #> 142          5.1         2.3  virginica #> 143          5.1         1.9  virginica #> 144          5.9         2.3  virginica #> 145          5.7         2.5  virginica #> 146          5.2         2.3  virginica #> 147          5.0         1.9  virginica #> 148          5.2         2.0  virginica #> 149          5.4         2.3  virginica #> 150          5.1         1.8  virginica side(iris, 1, 2) #>     Sepal.Length Sepal.Width #> 1            5.1         3.5 #> 2            4.9         3.0 #> 3            4.7         3.2 #> 4            4.6         3.1 #> 5            5.0         3.6 #> 6            5.4         3.9 #> 7            4.6         3.4 #> 8            5.0         3.4 #> 9            4.4         2.9 #> 10           4.9         3.1 #> 11           5.4         3.7 #> 12           4.8         3.4 #> 13           4.8         3.0 #> 14           4.3         3.0 #> 15           5.8         4.0 #> 16           5.7         4.4 #> 17           5.4         3.9 #> 18           5.1         3.5 #> 19           5.7         3.8 #> 20           5.1         3.8 #> 21           5.4         3.4 #> 22           5.1         3.7 #> 23           4.6         3.6 #> 24           5.1         3.3 #> 25           4.8         3.4 #> 26           5.0         3.0 #> 27           5.0         3.4 #> 28           5.2         3.5 #> 29           5.2         3.4 #> 30           4.7         3.2 #> 31           4.8         3.1 #> 32           5.4         3.4 #> 33           5.2         4.1 #> 34           5.5         4.2 #> 35           4.9         3.1 #> 36           5.0         3.2 #> 37           5.5         3.5 #> 38           4.9         3.6 #> 39           4.4         3.0 #> 40           5.1         3.4 #> 41           5.0         3.5 #> 42           4.5         2.3 #> 43           4.4         3.2 #> 44           5.0         3.5 #> 45           5.1         3.8 #> 46           4.8         3.0 #> 47           5.1         3.8 #> 48           4.6         3.2 #> 49           5.3         3.7 #> 50           5.0         3.3 #> 51           7.0         3.2 #> 52           6.4         3.2 #> 53           6.9         3.1 #> 54           5.5         2.3 #> 55           6.5         2.8 #> 56           5.7         2.8 #> 57           6.3         3.3 #> 58           4.9         2.4 #> 59           6.6         2.9 #> 60           5.2         2.7 #> 61           5.0         2.0 #> 62           5.9         3.0 #> 63           6.0         2.2 #> 64           6.1         2.9 #> 65           5.6         2.9 #> 66           6.7         3.1 #> 67           5.6         3.0 #> 68           5.8         2.7 #> 69           6.2         2.2 #> 70           5.6         2.5 #> 71           5.9         3.2 #> 72           6.1         2.8 #> 73           6.3         2.5 #> 74           6.1         2.8 #> 75           6.4         2.9 #> 76           6.6         3.0 #> 77           6.8         2.8 #> 78           6.7         3.0 #> 79           6.0         2.9 #> 80           5.7         2.6 #> 81           5.5         2.4 #> 82           5.5         2.4 #> 83           5.8         2.7 #> 84           6.0         2.7 #> 85           5.4         3.0 #> 86           6.0         3.4 #> 87           6.7         3.1 #> 88           6.3         2.3 #> 89           5.6         3.0 #> 90           5.5         2.5 #> 91           5.5         2.6 #> 92           6.1         3.0 #> 93           5.8         2.6 #> 94           5.0         2.3 #> 95           5.6         2.7 #> 96           5.7         3.0 #> 97           5.7         2.9 #> 98           6.2         2.9 #> 99           5.1         2.5 #> 100          5.7         2.8 #> 101          6.3         3.3 #> 102          5.8         2.7 #> 103          7.1         3.0 #> 104          6.3         2.9 #> 105          6.5         3.0 #> 106          7.6         3.0 #> 107          4.9         2.5 #> 108          7.3         2.9 #> 109          6.7         2.5 #> 110          7.2         3.6 #> 111          6.5         3.2 #> 112          6.4         2.7 #> 113          6.8         3.0 #> 114          5.7         2.5 #> 115          5.8         2.8 #> 116          6.4         3.2 #> 117          6.5         3.0 #> 118          7.7         3.8 #> 119          7.7         2.6 #> 120          6.0         2.2 #> 121          6.9         3.2 #> 122          5.6         2.8 #> 123          7.7         2.8 #> 124          6.3         2.7 #> 125          6.7         3.3 #> 126          7.2         3.2 #> 127          6.2         2.8 #> 128          6.1         3.0 #> 129          6.4         2.8 #> 130          7.2         3.0 #> 131          7.4         2.8 #> 132          7.9         3.8 #> 133          6.4         2.8 #> 134          6.3         2.8 #> 135          6.1         2.6 #> 136          7.7         3.0 #> 137          6.3         3.4 #> 138          6.4         3.1 #> 139          6.0         3.0 #> 140          6.9         3.1 #> 141          6.7         3.1 #> 142          6.9         3.1 #> 143          5.8         2.7 #> 144          6.8         3.2 #> 145          6.7         3.3 #> 146          6.7         3.0 #> 147          6.3         2.5 #> 148          6.5         3.0 #> 149          6.2         3.4 #> 150          5.9         3.0"},{"path":"https://adamlilith.github.io/omnibus/reference/stretchMinMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale values — stretchMinMax","title":"Rescale values — stretchMinMax","text":"function rescales vector numeric values arbitrary range. Optionally, stretch values equal lowest value can \"nudged\" slightly higher half minimum value across rescaled vector values > 0.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/stretchMinMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale values — stretchMinMax","text":"","code":"stretchMinMax(   x,   lower = 0,   upper = 1,   nudgeUp = FALSE,   nudgeDown = FALSE,   na.rm = FALSE )"},{"path":"https://adamlilith.github.io/omnibus/reference/stretchMinMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale values — stretchMinMax","text":"x Numeric list. lower Numeric, low end range stretch. upper Numeric, high end range stretch. nudgeUp, nudgeDown Logical, FALSE (default) nothing. TRUE ** rescaling [0, 1], small value added values x equal 0. value equal 0.5 * min(x[x > 0]). na.rm Logical, FALSE (default) values x NA returned value NA. TRUE NA's ignored calculation.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/stretchMinMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale values — stretchMinMax","text":"Numeric value.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/stretchMinMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale values — stretchMinMax","text":"","code":"x <- 1:10 stretchMinMax(x) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 1.0000000 stretchMinMax(x, lower=2, upper=5) #>  [1] 2.000000 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeUp=TRUE) #>  [1] 0.05555556 0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 #>  [7] 0.66666667 0.77777778 0.88888889 1.00000000 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 5.000000 stretchMinMax(x, nudgeDown=TRUE) #>  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 #>  [8] 0.7777778 0.8888889 0.9444444 stretchMinMax(x, lower=2, upper=5, nudgeUp=TRUE, nudgeDown=TRUE) #>  [1] 2.166667 2.333333 2.666667 3.000000 3.333333 3.666667 4.000000 4.333333 #>  [9] 4.666667 4.833333 x <- c(1:5, NA) stretchMinMax(x) #> [1] NA NA NA NA NA NA stretchMinMax(x, na.rm=TRUE) #> [1] 0.00 0.25 0.50 0.75 1.00   NA"},{"path":"https://adamlilith.github.io/omnibus/reference/unlistRecursive.html","id":null,"dir":"Reference","previous_headings":"","what":"For any object in a list that is also a list, unlist it — unlistRecursive","title":"For any object in a list that is also a list, unlist it — unlistRecursive","text":"function takes argument list. elements also lists, unlists . output input, except one new element per element sublist, sublists removed.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/unlistRecursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For any object in a list that is also a list, unlist it — unlistRecursive","text":"","code":"unlistRecursive(x)"},{"path":"https://adamlilith.github.io/omnibus/reference/unlistRecursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For any object in a list that is also a list, unlist it — unlistRecursive","text":"x list.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/unlistRecursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For any object in a list that is also a list, unlist it — unlistRecursive","text":"list.","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/unlistRecursive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For any object in a list that is also a list, unlist it — unlistRecursive","text":"","code":"x <- list(    a = 1:3,    b = list(       b1 = c(\"The\", \"quick\", \"brown\", \"function\"),        b2 = 4:1,       b3 = list(          b3_1 = 5:7       )    ),    c = \"end\" )  unlistRecursive(x) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] \"The\" #>  #> [[5]] #> [1] \"quick\" #>  #> [[6]] #> [1] \"brown\" #>  #> [[7]] #> [1] \"function\" #>  #> [[8]] #> [1] 4 #>  #> [[9]] #> [1] 3 #>  #> [[10]] #> [1] 2 #>  #> [[11]] #> [1] 1 #>  #> $b3_1 #> [1] 5 6 7 #>  #> [[13]] #> [1] \"end\" #>"},{"path":"https://adamlilith.github.io/omnibus/reference/unragMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a ","title":"Turn a ","text":"function turns \"ragged\" matrix vector. Consider case matrix looks like:  1, 0,  1 2, 3,  NA NA, 4, NA , row represents series values, missing values represented NA. can turned vector form going left right top bottom matrix, c(1, 0, 1, 2, 3, 4), plus vector c(1, 4, 6), provides index first non-NA value row matrix vector, plus another vector, c(1, 1, 1, 2, 2, 3), indicating row value vector belonged.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/unragMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a ","text":"","code":"unragMatrix(x, skip = NA)"},{"path":"https://adamlilith.github.io/omnibus/reference/unragMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a ","text":"x matrix. skip NA (default), NULL, numeric, integer, character value. Value include output. NULL, values skipped.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/unragMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a ","text":"list one vector per matrix, plus 1) vector named startIndex indices start values, 2) vector named row one value per non-skip value matrix.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/unragMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a ","text":"","code":"# default x <- matrix(c(1, 0, 1, 2, 3, NA, NA, 4, NA), byrow = TRUE, nrow = 3) unragMatrix(x) #> $x #> [1] 1 0 1 2 3 4 #>  #> $startIndex #> [1] 1 4 6 #>  #> $row #> [1] 1 1 1 2 2 3 #>   # skip nothing unragMatrix(x, skip = NULL) #> $x #> [1]  1  0  1  2  3 NA NA  4 NA #>  #> $startIndex #> [1] 1 4 7 #>  #> $row #> [1] 1 1 1 2 2 2 3 3 3 #>   # skips rows with all \"skip\" values y <- matrix(c(1, 0, 1, NA, NA, NA, NA, 4, NA), byrow = TRUE, nrow = 3) unragMatrix(y) #> $x #> [1] 1 0 1 4 #>  #> $startIndex #> [1] 1 2 4 #>  #> $row #> [1] 1 1 1 3 #>"},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Which vector has maximum value at each element — which.pmax","title":"Which vector has maximum value at each element — which.pmax","text":"functions vectorized versions .max .min, return index value maximum minimum (first maximum/minimum value, tie). case, function supplied two vectors length. element position (e.g., first element vector, second element, etc.) function returns integer indicating vector highest lowest value (index first vector highest lowest value case ties).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"which.pmax(..., na.rm = TRUE)  which.pmin(..., na.rm = TRUE)"},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which vector has maximum value at each element — which.pmax","text":"... Two vectors. lengths match, results likely unanticipated. na.rm Logical, FALSE vectors contains NA NaN, function return NA. TRUE (default), NA returned elements position NA NaN.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which vector has maximum value at each element — which.pmax","text":"Vector length input, numeric values indicating vector highest value position. case ties, index first vector returned.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Which vector has maximum value at each element — which.pmax","text":".pmin(): vector minimum value element","code":""},{"path":[]},{"path":"https://adamlilith.github.io/omnibus/reference/which.pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which vector has maximum value at each element — which.pmax","text":"","code":"set.seed(123) a <- sample(9, 5) b <- sample(9, 5) c <- sample(9, 5) a[2:3] <- NA b[3] <- NA a[6] <- NA b[6] <- NA c[6] <- NA which.pmax(a, b, c) #> [1]  2  2  3  2  1 NA which.pmin(a, b, c) #> [1]  1  2  3  3  2 NA which.pmax(a, b, c, na.rm=FALSE) #> [1]  2 NA NA  2  1 NA which.pmin(a, b, c, na.rm=FALSE) #> [1]  1 NA NA  3  2 NA"},{"path":"https://adamlilith.github.io/omnibus/reference/yearFromDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Year from date formats that are possibly ambiguous — yearFromDate","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"function attempts return year characters representing dates formats. formats can ambigous varied within set.  example, returns \"1982\" (9982 century ambiguous) \"11/20/82\", \"1982-11-20\", \"Nov. 20, 1982\", \"20 Nov 1982\", \"20-Nov-1982\", \"20/Nov/1982\", \"20 Nov. 82\", \"20 Nov 82\". function handles ambiguous centuries (e.g., 1813, 1913, 2013) including dummy place holder century place (.e., 9913). Note may return warnings like \"NAs introduced coercion\".","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/yearFromDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(x, yearLast = TRUE)"},{"path":"https://adamlilith.github.io/omnibus/reference/yearFromDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"x Character character vector, one dates. yearLast Logical, TRUE assume dates like \"XX/YY/ZZ\" list year last (=ZZ).  FALSE, assume first (=XX).","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/yearFromDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"Numeric.","code":""},{"path":"https://adamlilith.github.io/omnibus/reference/yearFromDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year from date formats that are possibly ambiguous — yearFromDate","text":"","code":"yearFromDate(1969, yearLast=TRUE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-Jul-1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-19-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-22-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/Jul/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/Jul/1971', yearLast=TRUE) # --> 1971 #> [1] 1971 yearFromDate('10/19/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/19/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/22/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=TRUE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 19 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 22 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=TRUE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=TRUE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=TRUE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=TRUE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=TRUE) # --> 2014 #> [1] 2014  yearFromDate(1969, yearLast=FALSE) #> [1] 1969 yearFromDate('10-Jul-71', yearLast=FALSE) # --> 9971 #> [1] 9910 yearFromDate('10-Jul-1971', yearLast=FALSE) # --> 1971 #> [1] 1971 yearFromDate('10-19-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10-19-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10-1-71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3-22-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3-2-71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10-1-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-22-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3-2-1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/19/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10/19/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10/1/71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3/22/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3/2/71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10/1/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/22/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3/2/1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('5 mmm 71', yearLast=FALSE) # \"mmm\" is month abbreviation--> 9971 #> [1] NA yearFromDate('10 19 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('10 19 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('10 1 71', yearLast=FALSE) # --> 9910 #> [1] 9910 yearFromDate('3 22 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('3 2 71', yearLast=FALSE) # --> 9971 #> [1] 9971 yearFromDate('10 1 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 22 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('3 2 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('Oct. 19, 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('19 October 1969', yearLast=FALSE) # --> 1969 #> [1] 1969 yearFromDate('How you do dat?', yearLast=FALSE) # --> NA #> [1] NA yearFromDate('2014-07-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-07-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014-7-3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/07/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014/7/3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 03', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 07 3', yearLast=FALSE) # --> 2014 #> [1] 2014 yearFromDate('2014 7 3', yearLast=FALSE) # --> 2014 #> [1] 2014"},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-1214-2024-09-16","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.14 (2024-09-16)","title":"omnibus 1.2.14 (2024-09-16)","text":"CRAN release: 2024-09-17 o Added function renameCol() shorten process renaming columns. o Added function side() extract left/right side data.frame matrix. o Added function unragMatrix() convert ragged matrix vector.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-1212-2024-05-16","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.12 (2024-05-16)","title":"omnibus 1.2.12 (2024-05-16)","text":"CRAN release: 2024-04-07 o Changed arguments mergeLists() ... can handle >2 lists time. o Added appendLists() combining lists elements may names. o roundedSigDigits() works numbers expressed scientific notation.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-1211-2024-04-03","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.11 (2024-04-03)","title":"omnibus 1.2.11 (2024-04-03)","text":"o Added functions compareFloat() aliases floating-point logical comparisons. o Added function .wholeNumber() tests value whole number. o Added function forwardSlash() converts backslashes forward slashes. o Fixed bug convertUnits() converting meters kilometers.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-1210-2024-03-10","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.10 (2024-03-10)","title":"omnibus 1.2.10 (2024-03-10)","text":"o Internal fix pmatchSafe() avoid conflicts packages.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-129-2024-01-08","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.9 (2024-01-08)","title":"omnibus 1.2.9 (2024-01-08)","text":"CRAN release: 2024-01-09 o Made renumSeq() faster.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-128-2023-11-16","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.8 (2023-11-16)","title":"omnibus 1.2.8 (2023-11-16)","text":"CRAN release: 2023-12-08 o Added convertUnits() converts values common units. o Added conversionFactors data frame object. o Added pmatchSafe() supped-version pmatch(). o Added unlistRecursive() unlists lists lists.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-127-2023-08-21","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.7 (2023-08-21)","title":"omnibus 1.2.7 (2023-08-21)","text":"CRAN release: 2023-08-21 o Updated omnibus.r file compliance CRAN.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-126","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.6","title":"omnibus 1.2.6","text":"o Updated help several functions.","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-125","dir":"Changelog","previous_headings":"","what":"omnibus 1.2.5","title":"omnibus 1.2.5","text":"o Updated combineDf() sophisticated combination data frames. o combineDf() longer compatible prior versions omnibus! o Added notIn() %notin% (complements %%).","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-113","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.3","title":"omnibus 1.1.3","text":"CRAN release: 2023-01-26 o Added insert() inserts values vector. o Added renumSeq() renumbers sequence skipped intervals. o Fixed bug insertCol().","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-112","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.2","title":"omnibus 1.1.2","text":"CRAN release: 2022-02-15 o Removed clear().","code":""},{"path":"https://adamlilith.github.io/omnibus/news/index.html","id":"omnibus-111","dir":"Changelog","previous_headings":"","what":"omnibus 1.1.1","title":"omnibus 1.1.1","text":"o Removed (). o Cleaned help o First submission CRAN","code":""}]
